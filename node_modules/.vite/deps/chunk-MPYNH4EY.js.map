{
  "version": 3,
  "sources": ["browser-external:fast-xml-parser", "browser-external:buffer", "../../crc-32/crc32.js", "../../@aws-amplify/storage/node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js", "../../@aws-amplify/storage/node_modules/@smithy/md5-js/dist-es/constants.js", "../../@aws-amplify/storage/node_modules/@smithy/md5-js/dist-es/index.js", "../../@aws-amplify/storage/src/providers/s3/utils/client/runtime/constants.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/runtime/contentSha256middleware.ts", "../../@aws-amplify/storage/src/errors/StorageError.ts", "../../@aws-amplify/storage/src/errors/CanceledError.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/runtime/xhrTransferHandler.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/runtime/s3TransferHandler/xhr.ts", "../../@aws-amplify/storage/src/errors/types/validation.ts", "../../@aws-amplify/storage/src/errors/utils/assertValidationError.ts", "../../@aws-amplify/storage/src/providers/s3/utils/constants.ts", "../../@aws-amplify/storage/src/utils/logger.ts", "../../@aws-amplify/storage/src/providers/s3/utils/transferTask.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/byteLength.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/runtime/base64/index.browser.ts", "../../@aws-amplify/storage/src/providers/s3/utils/readFile.ts", "../../@aws-amplify/storage/src/providers/s3/utils/md5.ts", "../../@aws-amplify/storage/src/utils/resolvePrefix.ts", "../../@aws-amplify/storage/src/errors/constants.ts", "../../@aws-amplify/storage/src/providers/s3/utils/resolveS3ConfigAndInput.ts", "../../@aws-amplify/storage/src/providers/s3/utils/validateBucketOwnerID.ts", "../../@aws-amplify/storage/src/providers/s3/utils/isInputWithPath.ts", "../../@aws-amplify/storage/src/providers/s3/utils/resolveIdentityId.ts", "../../@aws-amplify/storage/src/providers/s3/utils/validateStorageOperationInput.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/runtime/xmlParser/dom.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/utils/parsePayload.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/utils/createRetryDecider.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/base.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/utils/deserializeHelpers.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/utils/serializeHelpers.ts", "../../@aws-amplify/storage/src/errors/IntegrityError.ts", "../../@aws-amplify/storage/src/providers/s3/utils/validateObjectUrl.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/getObject.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/listObjectsV2.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/putObject.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/createMultipartUpload.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/uploadPart.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/utils/integrityHelpers.ts", "../../@aws-amplify/storage/src/providers/s3/utils/validateMultipartUploadXML.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/completeMultipartUpload.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/listParts.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/abortMultipartUpload.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/copyObject.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/headObject.ts", "../../@aws-amplify/storage/src/providers/s3/utils/client/s3data/deleteObject.ts", "../../@aws-amplify/storage/src/providers/s3/utils/userAgent.ts", "../../@aws-amplify/storage/src/providers/s3/utils/hexUtils.ts", "../../@aws-amplify/storage/src/providers/s3/utils/crc32.ts", "../../@aws-amplify/storage/src/providers/s3/utils/constructContentDisposition.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/putObjectJob.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/uploadPartExecutor.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/uploadCache.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/progressTracker.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/initialUpload.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/calculatePartSize.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/getDataChunker.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/uploadHandlers.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/index.ts", "../../@aws-amplify/storage/src/providers/s3/apis/uploadData.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/downloadData.ts", "../../@aws-amplify/storage/src/providers/s3/apis/downloadData.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/remove.ts", "../../@aws-amplify/storage/src/providers/s3/apis/remove.ts", "../../@aws-amplify/storage/src/providers/s3/utils/validateStorageOperationInputWithPrefix.ts", "../../@aws-amplify/storage/src/providers/s3/utils/urlDecoder.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/list.ts", "../../@aws-amplify/storage/src/providers/s3/apis/list.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/getProperties.ts", "../../@aws-amplify/storage/src/providers/s3/apis/getProperties.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/copy.ts", "../../@aws-amplify/storage/src/providers/s3/apis/copy.ts", "../../@aws-amplify/storage/src/providers/s3/apis/internal/getUrl.ts", "../../@aws-amplify/storage/src/providers/s3/apis/getUrl.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fast-xml-parser\" has been externalized for browser compatibility. Cannot access \"fast-xml-parser.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"buffer\" has been externalized for browser compatibility. Cannot access \"buffer.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.2';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n", "export const fromUtf8 = (input) => new TextEncoder().encode(input);\n", "export const BLOCK_SIZE = 64;\nexport const DIGEST_LENGTH = 16;\nexport const INIT = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476];\n", "import { fromUtf8 } from \"@smithy/util-utf8\";\nimport { BLOCK_SIZE, DIGEST_LENGTH, INIT } from \"./constants\";\nexport class Md5 {\n    constructor() {\n        this.reset();\n    }\n    update(sourceData) {\n        if (isEmptyData(sourceData)) {\n            return;\n        }\n        else if (this.finished) {\n            throw new Error(\"Attempted to update an already finished hash.\");\n        }\n        const data = convertToBuffer(sourceData);\n        let position = 0;\n        let { byteLength } = data;\n        this.bytesHashed += byteLength;\n        while (byteLength > 0) {\n            this.buffer.setUint8(this.bufferLength++, data[position++]);\n            byteLength--;\n            if (this.bufferLength === BLOCK_SIZE) {\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n        }\n    }\n    async digest() {\n        if (!this.finished) {\n            const { buffer, bufferLength: undecoratedLength, bytesHashed } = this;\n            const bitsHashed = bytesHashed * 8;\n            buffer.setUint8(this.bufferLength++, 0b10000000);\n            if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n                for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {\n                    buffer.setUint8(i, 0);\n                }\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n            for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n                buffer.setUint8(i, 0);\n            }\n            buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);\n            buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);\n            this.hashBuffer();\n            this.finished = true;\n        }\n        const out = new DataView(new ArrayBuffer(DIGEST_LENGTH));\n        for (let i = 0; i < 4; i++) {\n            out.setUint32(i * 4, this.state[i], true);\n        }\n        return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);\n    }\n    hashBuffer() {\n        const { buffer, state } = this;\n        let a = state[0], b = state[1], c = state[2], d = state[3];\n        a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);\n        d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);\n        c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);\n        b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);\n        a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);\n        d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);\n        c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);\n        b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);\n        a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);\n        d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);\n        c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);\n        b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);\n        a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);\n        d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);\n        c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);\n        b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);\n        a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);\n        d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);\n        c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);\n        b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);\n        a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);\n        d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);\n        c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);\n        b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);\n        a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);\n        d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);\n        c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);\n        b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);\n        a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);\n        d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);\n        c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);\n        b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);\n        a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);\n        d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);\n        c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);\n        b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);\n        a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);\n        d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);\n        c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);\n        b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);\n        a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);\n        d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);\n        c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);\n        b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);\n        a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);\n        d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);\n        c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);\n        b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);\n        a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);\n        d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);\n        c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);\n        b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);\n        a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);\n        d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);\n        c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);\n        b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);\n        a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);\n        d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);\n        c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);\n        b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);\n        a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);\n        d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);\n        c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);\n        b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);\n        state[0] = (a + state[0]) & 0xffffffff;\n        state[1] = (b + state[1]) & 0xffffffff;\n        state[2] = (c + state[2]) & 0xffffffff;\n        state[3] = (d + state[3]) & 0xffffffff;\n    }\n    reset() {\n        this.state = Uint32Array.from(INIT);\n        this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n    }\n}\nfunction cmn(q, a, b, x, s, t) {\n    a = (((a + q) & 0xffffffff) + ((x + t) & 0xffffffff)) & 0xffffffff;\n    return (((a << s) | (a >>> (32 - s))) + b) & 0xffffffff;\n}\nfunction ff(a, b, c, d, x, s, t) {\n    return cmn((b & c) | (~b & d), a, b, x, s, t);\n}\nfunction gg(a, b, c, d, x, s, t) {\n    return cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\nfunction hh(a, b, c, d, x, s, t) {\n    return cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction ii(a, b, c, d, x, s, t) {\n    return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nfunction convertToBuffer(data) {\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport const SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\nexport const NETWORK_ERROR_MESSAGE = 'Network Error';\nexport const NETWORK_ERROR_CODE = 'ERR_NETWORK';\nexport const ABORT_ERROR_MESSAGE = 'Request aborted';\nexport const ABORT_ERROR_CODE = 'ERR_ABORTED';\nexport const CANCELED_ERROR_MESSAGE = 'canceled';\nexport const CANCELED_ERROR_CODE = 'ERR_CANCELED';\nexport const CONTENT_SHA256_HEADER = 'x-amz-content-sha256';\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getHashedPayload, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { CONTENT_SHA256_HEADER } from './constants';\n/**\n * A middleware that adds the x-amz-content-sha256 header to the request if it is not already present.\n * It's required for S3 requests in browsers where the request body is sent in 1 chunk.\n * @see https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n *\n * @internal\n */\nexport const contentSha256MiddlewareFactory = () => (next) => async function contentSha256Middleware(request) {\n    if (request.headers[CONTENT_SHA256_HEADER]) {\n        return next(request);\n    }\n    else {\n        const hash = await getHashedPayload(request.body);\n        request.headers[CONTENT_SHA256_HEADER] = hash;\n        return next(request);\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError, } from '@aws-amplify/core/internals/utils';\nexport class StorageError extends AmplifyError {\n    constructor(params) {\n        super(params);\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = StorageError;\n        Object.setPrototypeOf(this, StorageError.prototype);\n    }\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageError } from './StorageError';\n/**\n * Internal-only class for CanceledError thrown by XHR handler or multipart upload when cancellation is invoked\n * without overwriting behavior.\n *\n * @internal\n */\nexport class CanceledError extends StorageError {\n    constructor(params = {}) {\n        super({\n            name: 'CanceledError',\n            message: 'Upload is canceled by user',\n            ...params,\n        });\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = CanceledError;\n        Object.setPrototypeOf(this, CanceledError.prototype);\n    }\n}\n/**\n * Check if an error is caused by user calling `cancel()` on a upload/download task. If an overwriting error is\n * supplied to `task.cancel(errorOverwrite)`, this function will return `false`.\n * @param {unknown} error The unknown exception to be checked.\n * @returns - A boolean indicating if the error was from an upload cancellation\n */\nexport const isCancelError = (error) => !!error && error instanceof CanceledError;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { withMemoization, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { CanceledError } from '../../../../../errors/CanceledError';\nimport { StorageError } from '../../../../../errors/StorageError';\nimport { ABORT_ERROR_CODE, ABORT_ERROR_MESSAGE, CANCELED_ERROR_CODE, CANCELED_ERROR_MESSAGE, NETWORK_ERROR_CODE, NETWORK_ERROR_MESSAGE, } from './constants';\nconst logger = new ConsoleLogger('xhr-http-handler');\n/**\n * Base transfer handler implementation using XMLHttpRequest to support upload and download progress events.\n *\n * @param request - The request object.\n * @param options - The request options.\n * @returns A promise that will be resolved with the response object.\n *\n * @internal\n */\nexport const xhrTransferHandler = (request, options) => {\n    const { url, method, headers, body } = request;\n    const { onDownloadProgress, onUploadProgress, responseType, abortSignal } = options;\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n        xhr.open(method.toUpperCase(), url.toString());\n        Object.entries(headers)\n            .filter(([header]) => !FORBIDDEN_HEADERS.includes(header))\n            .forEach(([header, value]) => {\n            xhr.setRequestHeader(header, value);\n        });\n        xhr.responseType = responseType;\n        if (onDownloadProgress) {\n            xhr.addEventListener('progress', event => {\n                onDownloadProgress(convertToTransferProgressEvent(event));\n                logger.debug(event);\n            });\n        }\n        if (onUploadProgress) {\n            xhr.upload.addEventListener('progress', event => {\n                onUploadProgress(convertToTransferProgressEvent(event));\n                logger.debug(event);\n            });\n        }\n        xhr.addEventListener('error', () => {\n            const networkError = new StorageError({\n                message: NETWORK_ERROR_MESSAGE,\n                name: NETWORK_ERROR_CODE,\n            });\n            logger.error(NETWORK_ERROR_MESSAGE);\n            reject(networkError);\n            xhr = null; // clean up request\n        });\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        xhr.addEventListener('abort', () => {\n            // The abort event can be triggered after the error or load event. So we need to check if the xhr is null.\n            // When request is aborted by AbortSignal, the promise is rejected in the abortSignal's 'abort' event listener.\n            if (!xhr || abortSignal?.aborted)\n                return;\n            // Handle abort request caused by browser instead of AbortController\n            // see: https://github.com/axios/axios/issues/537\n            const error = buildHandlerError(ABORT_ERROR_MESSAGE, ABORT_ERROR_CODE);\n            logger.error(ABORT_ERROR_MESSAGE);\n            reject(error);\n            xhr = null; // clean up request\n        });\n        // Skip handling timeout error since we don't have a timeout\n        xhr.addEventListener('readystatechange', () => {\n            if (!xhr || xhr.readyState !== xhr.DONE) {\n                return;\n            }\n            const onloadend = () => {\n                // The load event is triggered after the error/abort/load event. So we need to check if the xhr is null.\n                if (!xhr)\n                    return;\n                const responseHeaders = convertResponseHeaders(xhr.getAllResponseHeaders());\n                const { responseType: loadEndResponseType } = xhr;\n                const responseBlob = xhr.response;\n                const responseText = loadEndResponseType === 'text' ? xhr.responseText : '';\n                const bodyMixIn = {\n                    blob: () => Promise.resolve(responseBlob),\n                    text: withMemoization(() => loadEndResponseType === 'blob'\n                        ? readBlobAsText(responseBlob)\n                        : Promise.resolve(responseText)),\n                    json: () => Promise.reject(\n                    // S3 does not support JSON response. So fail-fast here with nicer error message.\n                    new Error('Parsing response to JSON is not implemented. Please use response.text() instead.')),\n                };\n                const response = {\n                    statusCode: xhr.status,\n                    headers: responseHeaders,\n                    // The xhr.responseType is only set to 'blob' for streaming binary S3 object data. The streaming data is\n                    // exposed via public interface of Storage.get(). So we need to return the response as a Blob object for\n                    // backward compatibility. In other cases, the response payload is only used internally, we return it is\n                    // {@link ResponseBodyMixin}\n                    body: (xhr.responseType === 'blob'\n                        ? Object.assign(responseBlob, bodyMixIn)\n                        : bodyMixIn),\n                };\n                resolve(response);\n                xhr = null; // clean up request\n            };\n            // readystate handler is calling before onerror or ontimeout handlers,\n            // so we should call onloadend on the next 'tick'\n            // @see https://github.com/axios/axios/blob/9588fcdec8aca45c3ba2f7968988a5d03f23168c/lib/adapters/xhr.js#L98-L99\n            setTimeout(onloadend);\n        });\n        if (abortSignal) {\n            const onCanceled = () => {\n                // The abort event is triggered after the error or load event. So we need to check if the xhr is null.\n                if (!xhr) {\n                    return;\n                }\n                const canceledError = new CanceledError({\n                    name: CANCELED_ERROR_CODE,\n                    message: CANCELED_ERROR_MESSAGE,\n                });\n                reject(canceledError);\n                xhr.abort();\n                xhr = null;\n            };\n            abortSignal.aborted\n                ? onCanceled()\n                : abortSignal.addEventListener('abort', onCanceled);\n        }\n        if (typeof ReadableStream === 'function' &&\n            body instanceof ReadableStream) {\n            // This does not matter as previous implementation uses Axios which does not support ReadableStream anyway.\n            throw new Error('ReadableStream request payload is not supported.');\n        }\n        xhr.send(body ?? null);\n    });\n};\nconst convertToTransferProgressEvent = (event) => ({\n    transferredBytes: event.loaded,\n    totalBytes: event.lengthComputable ? event.total : undefined,\n});\nconst buildHandlerError = (message, name) => {\n    const error = new Error(message);\n    error.name = name;\n    return error;\n};\n/**\n * Convert xhr.getAllResponseHeaders() string to a Record<string, string>. Note that modern browser already returns\n * header names in lowercase.\n * @param xhrHeaders - string of headers returned from xhr.getAllResponseHeaders()\n */\nconst convertResponseHeaders = (xhrHeaders) => {\n    if (!xhrHeaders) {\n        return {};\n    }\n    return xhrHeaders\n        .split('\\r\\n')\n        .reduce((headerMap, line) => {\n        const parts = line.split(': ');\n        const header = parts.shift();\n        const value = parts.join(': ');\n        headerMap[header.toLowerCase()] = value;\n        return headerMap;\n    }, {});\n};\nconst readBlobAsText = (blob) => {\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n        reader.onloadend = () => {\n            if (reader.readyState !== FileReader.DONE) {\n                return;\n            }\n            resolve(reader.result);\n        };\n        reader.onerror = () => {\n            reject(reader.error);\n        };\n        reader.readAsText(blob);\n    });\n};\n// To add more forbidden headers as found set by S3. Intentionally NOT list all of them here to save bundle size.\n// https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\nconst FORBIDDEN_HEADERS = ['host'];\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { amzSdkInvocationIdHeaderMiddlewareFactory, amzSdkRequestHeaderMiddlewareFactory, retryMiddlewareFactory, signingMiddlewareFactory, userAgentMiddlewareFactory, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeTransferHandler } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { contentSha256MiddlewareFactory } from '../contentSha256middleware';\nimport { xhrTransferHandler } from '../xhrTransferHandler';\n/**\n * S3 transfer handler for browser and React Native based on XHR. On top of basic transfer handler, it also supports\n * x-amz-content-sha256 header, and request&response process tracking.\n *\n * @internal\n */\nexport const s3TransferHandler = composeTransferHandler(xhrTransferHandler, [\n    contentSha256MiddlewareFactory,\n    userAgentMiddlewareFactory,\n    amzSdkInvocationIdHeaderMiddlewareFactory,\n    retryMiddlewareFactory,\n    amzSdkRequestHeaderMiddlewareFactory,\n    signingMiddlewareFactory,\n]);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var StorageValidationErrorCode;\n(function (StorageValidationErrorCode) {\n    StorageValidationErrorCode[\"NoCredentials\"] = \"NoCredentials\";\n    StorageValidationErrorCode[\"NoIdentityId\"] = \"NoIdentityId\";\n    StorageValidationErrorCode[\"NoKey\"] = \"NoKey\";\n    StorageValidationErrorCode[\"NoSourceKey\"] = \"NoSourceKey\";\n    StorageValidationErrorCode[\"NoDestinationKey\"] = \"NoDestinationKey\";\n    StorageValidationErrorCode[\"NoSourcePath\"] = \"NoSourcePath\";\n    StorageValidationErrorCode[\"NoDestinationPath\"] = \"NoDestinationPath\";\n    StorageValidationErrorCode[\"NoBucket\"] = \"NoBucket\";\n    StorageValidationErrorCode[\"NoRegion\"] = \"NoRegion\";\n    StorageValidationErrorCode[\"InvalidStorageBucket\"] = \"InvalidStorageBucket\";\n    StorageValidationErrorCode[\"InvalidCopyOperationStorageBucket\"] = \"InvalidCopyOperationStorageBucket\";\n    StorageValidationErrorCode[\"InvalidStorageOperationPrefixInput\"] = \"InvalidStorageOperationPrefixInput\";\n    StorageValidationErrorCode[\"InvalidStorageOperationInput\"] = \"InvalidStorageOperationInput\";\n    StorageValidationErrorCode[\"InvalidAWSAccountID\"] = \"InvalidAWSAccountID\";\n    StorageValidationErrorCode[\"InvalidStoragePathInput\"] = \"InvalidStoragePathInput\";\n    StorageValidationErrorCode[\"InvalidUploadSource\"] = \"InvalidUploadSource\";\n    StorageValidationErrorCode[\"ObjectIsTooLarge\"] = \"ObjectIsTooLarge\";\n    StorageValidationErrorCode[\"UrlExpirationMaxLimitExceed\"] = \"UrlExpirationMaxLimitExceed\";\n    StorageValidationErrorCode[\"InvalidLocationCredentialsCacheSize\"] = \"InvalidLocationCredentialsCacheSize\";\n    StorageValidationErrorCode[\"LocationCredentialsStoreDestroyed\"] = \"LocationCredentialsStoreDestroyed\";\n    StorageValidationErrorCode[\"InvalidS3Uri\"] = \"InvalidS3Uri\";\n    StorageValidationErrorCode[\"InvalidCustomEndpoint\"] = \"InvalidCustomEndpoint\";\n    StorageValidationErrorCode[\"ForcePathStyleEndpointNotSupported\"] = \"ForcePathStyleEndpointNotSupported\";\n    StorageValidationErrorCode[\"DnsIncompatibleBucketName\"] = \"DnsIncompatibleBucketName\";\n})(StorageValidationErrorCode || (StorageValidationErrorCode = {}));\nexport const validationErrorMap = {\n    [StorageValidationErrorCode.NoCredentials]: {\n        message: 'Credentials should not be empty.',\n    },\n    [StorageValidationErrorCode.NoIdentityId]: {\n        message: 'Missing identity ID when accessing objects in protected or private access level.',\n    },\n    [StorageValidationErrorCode.NoKey]: {\n        message: 'Missing key in api call.',\n    },\n    [StorageValidationErrorCode.NoSourceKey]: {\n        message: 'Missing source key in copy api call.',\n    },\n    [StorageValidationErrorCode.NoDestinationKey]: {\n        message: 'Missing destination key in copy api call.',\n    },\n    [StorageValidationErrorCode.NoSourcePath]: {\n        message: 'Missing source path in copy api call.',\n    },\n    [StorageValidationErrorCode.NoDestinationPath]: {\n        message: 'Missing destination path in copy api call.',\n    },\n    [StorageValidationErrorCode.NoBucket]: {\n        message: 'Missing bucket name while accessing object.',\n    },\n    [StorageValidationErrorCode.NoRegion]: {\n        message: 'Missing region while accessing object.',\n    },\n    [StorageValidationErrorCode.UrlExpirationMaxLimitExceed]: {\n        message: 'Url Expiration can not be greater than 7 Days.',\n    },\n    [StorageValidationErrorCode.ObjectIsTooLarge]: {\n        message: 'Object size cannot not be greater than 5TB.',\n    },\n    [StorageValidationErrorCode.InvalidUploadSource]: {\n        message: 'Upload source type can only be a `Blob`, `File`, `ArrayBuffer`, or `string`.',\n    },\n    [StorageValidationErrorCode.InvalidStorageOperationInput]: {\n        message: 'Path or key parameter must be specified in the input. Both can not be specified at the same time.',\n    },\n    [StorageValidationErrorCode.InvalidAWSAccountID]: {\n        message: 'Invalid AWS account ID was provided.',\n    },\n    [StorageValidationErrorCode.InvalidStorageOperationPrefixInput]: {\n        message: 'Both path and prefix can not be specified at the same time.',\n    },\n    [StorageValidationErrorCode.InvalidStoragePathInput]: {\n        message: 'Input `path` does not allow a leading slash (/).',\n    },\n    [StorageValidationErrorCode.InvalidLocationCredentialsCacheSize]: {\n        message: 'locationCredentialsCacheSize must be a positive integer.',\n    },\n    [StorageValidationErrorCode.LocationCredentialsStoreDestroyed]: {\n        message: `Location-specific credentials store has been destroyed.`,\n    },\n    [StorageValidationErrorCode.InvalidS3Uri]: {\n        message: 'Invalid S3 URI.',\n    },\n    [StorageValidationErrorCode.InvalidStorageBucket]: {\n        message: 'Unable to lookup bucket from provided name in Amplify configuration.',\n    },\n    [StorageValidationErrorCode.InvalidCopyOperationStorageBucket]: {\n        message: 'Missing bucket option in either source or destination.',\n    },\n    [StorageValidationErrorCode.InvalidCustomEndpoint]: {\n        message: 'Invalid S3 custom endpoint.',\n    },\n    [StorageValidationErrorCode.ForcePathStyleEndpointNotSupported]: {\n        message: 'Path style URLs are not supported with S3 Transfer Acceleration.',\n    },\n    [StorageValidationErrorCode.DnsIncompatibleBucketName]: {\n        message: `The bucket name isn't DNS compatible.`,\n    },\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { validationErrorMap, } from '../types/validation';\nimport { StorageError } from '../StorageError';\nexport function assertValidationError(assertion, name) {\n    const { message, recoverySuggestion } = validationErrorMap[name];\n    if (!assertion) {\n        throw new StorageError({ name, message, recoverySuggestion });\n    }\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const LOCAL_TESTING_S3_ENDPOINT = 'http://localhost:20005';\nexport const DEFAULT_ACCESS_LEVEL = 'guest';\nexport const DEFAULT_PRESIGN_EXPIRATION = 900;\nexport const MAX_URL_EXPIRATION = 7 * 24 * 60 * 60 * 1000;\nconst MiB = 1024 * 1024;\nconst GiB = 1024 * MiB;\nconst TiB = 1024 * GiB;\n/**\n * Default part size in MB that is used to determine if an upload task is single part or multi part.\n */\nexport const DEFAULT_PART_SIZE = 5 * MiB;\nexport const MAX_OBJECT_SIZE = 5 * TiB;\nexport const MAX_PARTS_COUNT = 10000;\nexport const DEFAULT_QUEUE_SIZE = 4;\nexport const UPLOADS_STORAGE_KEY = '__uploadInProgress';\nexport const STORAGE_INPUT_PREFIX = 'prefix';\nexport const STORAGE_INPUT_KEY = 'key';\nexport const STORAGE_INPUT_PATH = 'path';\nexport const DEFAULT_DELIMITER = '/';\nexport const CHECKSUM_ALGORITHM_CRC32 = 'crc-32';\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '@aws-amplify/core';\nexport const logger = new ConsoleLogger('Storage');\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isCancelError } from '../../../errors/CanceledError';\nimport { logger } from '../../../utils';\nconst createCancellableTask = ({ job, onCancel, }) => {\n    const state = 'IN_PROGRESS';\n    let canceledErrorMessage;\n    const cancelableTask = {\n        cancel: (message) => {\n            const { state: taskState } = cancelableTask;\n            if (taskState === 'CANCELED' ||\n                taskState === 'ERROR' ||\n                taskState === 'SUCCESS') {\n                logger.debug(`This task cannot be canceled. State: ${taskState}`);\n                return;\n            }\n            cancelableTask.state = 'CANCELED';\n            canceledErrorMessage = message;\n            onCancel(canceledErrorMessage);\n        },\n        state,\n    };\n    const wrappedJobPromise = (async () => {\n        try {\n            const result = await job();\n            cancelableTask.state = 'SUCCESS';\n            return result;\n        }\n        catch (e) {\n            if (isCancelError(e)) {\n                cancelableTask.state = 'CANCELED';\n                e.message = canceledErrorMessage ?? e.message;\n            }\n            cancelableTask.state = 'ERROR';\n            throw e;\n        }\n    })();\n    return Object.assign(cancelableTask, {\n        result: wrappedJobPromise,\n    });\n};\nexport const createDownloadTask = createCancellableTask;\nexport const createUploadTask = ({ job, onCancel, onResume, onPause, isMultipartUpload, }) => {\n    const cancellableTask = createCancellableTask({\n        job,\n        onCancel,\n    });\n    const uploadTask = Object.assign(cancellableTask, {\n        pause: () => {\n            const { state } = uploadTask;\n            if (!isMultipartUpload || state !== 'IN_PROGRESS') {\n                logger.debug(`This task cannot be paused. State: ${state}`);\n                return;\n            }\n            // TODO(eslint): remove this linter suppression.\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            uploadTask.state = 'PAUSED';\n            onPause?.();\n        },\n        resume: () => {\n            const { state } = uploadTask;\n            if (!isMultipartUpload || state !== 'PAUSED') {\n                logger.debug(`This task cannot be resumed. State: ${state}`);\n                return;\n            }\n            // TODO(eslint): remove this linter suppression.\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            uploadTask.state = 'IN_PROGRESS';\n            onResume?.();\n        },\n    });\n    return uploadTask;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Calculate the total size of the data to be uploaded. The total size is not required for multipart upload, as it's\n * only used in progress report.\n */\nexport const byteLength = (input) => {\n    if (input === null || input === undefined)\n        return 0;\n    if (typeof input === 'string') {\n        const blob = new Blob([input]);\n        return blob.size;\n    }\n    else if (typeof input.byteLength === 'number') {\n        // handles Uint8Array, ArrayBuffer, Buffer, and ArrayBufferView\n        return input.byteLength;\n    }\n    else if (typeof input.size === 'number') {\n        // handles browser File object\n        return input.size;\n    }\n    return undefined;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction bytesToBase64(bytes) {\n    const base64Str = Array.from(bytes, x => String.fromCodePoint(x)).join('');\n    return btoa(base64Str);\n}\nexport function toBase64(input) {\n    if (typeof input === 'string') {\n        return bytesToBase64(new TextEncoder().encode(input));\n    }\n    return bytesToBase64(new Uint8Array(input.buffer, input.byteOffset, input.byteLength));\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const readFile = (file) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        resolve(reader.result);\n    };\n    reader.onabort = () => {\n        reject(new Error('Read aborted'));\n    };\n    reader.onerror = () => {\n        reject(reader.error);\n    };\n    reader.readAsArrayBuffer(file);\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Md5 } from '@smithy/md5-js';\nimport { toBase64 } from './client/utils';\nimport { readFile } from './readFile';\nexport const calculateContentMd5 = async (content) => {\n    const hasher = new Md5();\n    const buffer = content instanceof Blob ? await readFile(content) : content;\n    hasher.update(buffer);\n    const digest = await hasher.digest();\n    return toBase64(digest);\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../errors/types/validation';\nexport const resolvePrefix = ({ accessLevel, targetIdentityId, }) => {\n    if (accessLevel === 'private') {\n        assertValidationError(!!targetIdentityId, StorageValidationErrorCode.NoIdentityId);\n        return `private/${targetIdentityId}/`;\n    }\n    else if (accessLevel === 'protected') {\n        assertValidationError(!!targetIdentityId, StorageValidationErrorCode.NoIdentityId);\n        return `protected/${targetIdentityId}/`;\n    }\n    else {\n        return 'public/';\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const INVALID_STORAGE_INPUT = 'InvalidStorageInput';\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { resolvePrefix as defaultPrefixResolver } from '../../../utils/resolvePrefix';\nimport { StorageError } from '../../../errors/StorageError';\nimport { INVALID_STORAGE_INPUT } from '../../../errors/constants';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants';\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A `StorageError` with `error.name` from `StorageValidationErrorCode` indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nexport const resolveS3ConfigAndInput = async (amplify, apiInput) => {\n    const { options: apiOptions } = apiInput ?? {};\n    /**\n     * IdentityId is always cached in memory so we can safely make calls here. It\n     * should be stable even for unauthenticated users, regardless of credentials.\n     */\n    const { identityId } = await amplify.Auth.fetchAuthSession();\n    /**\n     * A credentials provider function instead of a static credentials object is\n     * used because the long-running tasks like multipart upload may span over the\n     * credentials expiry. Auth.fetchAuthSession() automatically refreshes the\n     * credentials if they are expired.\n     *\n     * The optional forceRefresh option is set when the S3 service returns expired\n     * tokens error in the previous API call attempt.\n     */\n    const credentialsProvider = async (options) => {\n        if (isLocationCredentialsProvider(apiOptions)) {\n            assertStorageInput(apiInput);\n        }\n        // TODO: forceRefresh option of fetchAuthSession would refresh both tokens and\n        // AWS credentials. So we do not support forceRefreshing from the Auth until\n        // we support refreshing only the credentials.\n        const { credentials } = isLocationCredentialsProvider(apiOptions)\n            ? await apiOptions.locationCredentialsProvider(options)\n            : await amplify.Auth.fetchAuthSession();\n        assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n        return credentials;\n    };\n    const { bucket: defaultBucket, region: defaultRegion, dangerouslyConnectToHttpEndpointForTesting, buckets, } = amplify.getConfig()?.Storage?.S3 ?? {};\n    const { bucket = defaultBucket, region = defaultRegion } = (apiOptions?.bucket && resolveBucketConfig(apiOptions, buckets)) || {};\n    assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n    assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n    const { defaultAccessLevel, prefixResolver = defaultPrefixResolver, isObjectLockEnabled, } = amplify.libraryOptions?.Storage?.S3 ?? {};\n    const accessLevel = apiOptions?.accessLevel ?? defaultAccessLevel ?? DEFAULT_ACCESS_LEVEL;\n    const targetIdentityId = accessLevel === 'protected'\n        ? (apiOptions?.targetIdentityId ?? identityId)\n        : identityId;\n    const keyPrefix = await prefixResolver({ accessLevel, targetIdentityId });\n    return {\n        s3Config: {\n            credentials: credentialsProvider,\n            region,\n            useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n            ...(apiOptions?.customEndpoint\n                ? { customEndpoint: apiOptions.customEndpoint }\n                : {}),\n            ...(dangerouslyConnectToHttpEndpointForTesting\n                ? {\n                    customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n                    forcePathStyle: true,\n                }\n                : {}),\n        },\n        bucket,\n        keyPrefix,\n        identityId,\n        isObjectLockEnabled,\n    };\n};\nconst isLocationCredentialsProvider = (options) => {\n    return !!options?.locationCredentialsProvider;\n};\nconst isInputWithCallbackPath = (input) => {\n    return ((input?.path &&\n        typeof input.path === 'function') ||\n        (input?.destination?.path &&\n            typeof input.destination?.path === 'function') ||\n        (input?.source?.path &&\n            typeof input.source?.path === 'function'));\n};\nconst isDeprecatedInput = (input) => {\n    return (isInputWithKey(input) ||\n        isInputWithPrefix(input) ||\n        isInputWithCopySourceOrDestination(input));\n};\nconst assertStorageInput = (input) => {\n    if (isDeprecatedInput(input) || isInputWithCallbackPath(input)) {\n        throw new StorageError({\n            name: INVALID_STORAGE_INPUT,\n            message: 'The input needs to have a path as a string value.',\n            recoverySuggestion: 'Please provide a valid path as a string value for the input.',\n        });\n    }\n};\nconst isInputWithKey = (input) => {\n    return !!(typeof input.key === 'string');\n};\nconst isInputWithPrefix = (input) => {\n    return !!(typeof input.prefix === 'string');\n};\nconst isInputWithCopySourceOrDestination = (input) => {\n    return !!(typeof input.source?.key === 'string' ||\n        typeof input.destination?.key === 'string');\n};\nconst resolveBucketConfig = (apiOptions, buckets) => {\n    if (typeof apiOptions.bucket === 'string') {\n        const bucketConfig = buckets?.[apiOptions.bucket];\n        assertValidationError(!!bucketConfig, StorageValidationErrorCode.InvalidStorageBucket);\n        return { bucket: bucketConfig.bucketName, region: bucketConfig.region };\n    }\n    if (typeof apiOptions.bucket === 'object') {\n        return {\n            bucket: apiOptions.bucket.bucketName,\n            region: apiOptions.bucket.region,\n        };\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nconst VALID_AWS_ACCOUNT_ID_PATTERN = /^\\d{12}/;\nexport const validateBucketOwnerID = (accountID) => {\n    if (accountID === undefined) {\n        return;\n    }\n    assertValidationError(VALID_AWS_ACCOUNT_ID_PATTERN.test(accountID), StorageValidationErrorCode.InvalidAWSAccountID);\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const isInputWithPath = (input) => {\n    return input.path !== undefined;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nexport const resolveIdentityId = (identityId) => {\n    assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n    return identityId;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { isInputWithPath } from './isInputWithPath';\nimport { STORAGE_INPUT_KEY, STORAGE_INPUT_PATH } from './constants';\nimport { resolveIdentityId } from './resolveIdentityId';\nexport const validateStorageOperationInput = (input, identityId) => {\n    assertValidationError(\n    // Key present without a path\n    (!!input.key && !input.path) ||\n        // Path present without a key\n        (!input.key && !!input.path), StorageValidationErrorCode.InvalidStorageOperationInput);\n    if (isInputWithPath(input)) {\n        const { path } = input;\n        const objectKey = typeof path === 'string'\n            ? path\n            : path({ identityId: resolveIdentityId(identityId) });\n        assertValidationError(!objectKey.startsWith('/'), StorageValidationErrorCode.InvalidStoragePathInput);\n        return {\n            inputType: STORAGE_INPUT_PATH,\n            objectKey,\n        };\n    }\n    else {\n        return { inputType: STORAGE_INPUT_KEY, objectKey: input.key };\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Drop-in replacement for fast-xml-parser's XmlParser class used in the AWS SDK S3 client XML deserializer. This\n * implementation is not tested against the full xml conformance test suite. It is only tested against the XML responses\n * from S3. This implementation requires the `DOMParser` class in the runtime.\n */\nexport const parser = {\n    parse: (xmlStr) => {\n        const domParser = new DOMParser();\n        const xml = domParser.parseFromString(xmlStr, 'text/xml');\n        const parsedObj = parseXmlNode(xml);\n        const rootKey = Object.keys(parsedObj)[0];\n        return parsedObj[rootKey];\n    },\n};\nconst parseXmlNode = (node) => {\n    if (isDocumentNode(node)) {\n        return {\n            [node.documentElement.nodeName]: parseXmlNode(node.documentElement),\n        };\n    }\n    if (node.nodeType === Node.TEXT_NODE) {\n        return node.nodeValue?.trim();\n    }\n    if (isElementNode(node)) {\n        // Node like <Location>foo</Location> will be converted to { Location: 'foo' }\n        // instead of { Location: { '#text': 'foo' } }.\n        if (isTextOnlyElementNode(node)) {\n            return node.childNodes[0].nodeValue;\n        }\n        const nodeValue = {};\n        // convert attributes\n        for (const attr of node.attributes) {\n            if (!isNamespaceAttributeName(attr.nodeName)) {\n                nodeValue[attr.nodeName] = attr.nodeValue;\n            }\n        }\n        // convert child nodes\n        if (node.children.length > 0) {\n            for (const child of node.children) {\n                const childValue = parseXmlNode(child);\n                if (childValue === undefined) {\n                    continue;\n                }\n                const childName = child.nodeName;\n                if (nodeValue[childName] === undefined) {\n                    nodeValue[childName] = childValue;\n                }\n                else if (Array.isArray(nodeValue[childName])) {\n                    nodeValue[childName].push(childValue);\n                }\n                else {\n                    nodeValue[childName] = [nodeValue[childName], childValue];\n                }\n            }\n        }\n        // Return empty element node as empty string instead of `{}`, which is the default behavior of fast-xml-parser.\n        return Object.keys(nodeValue).length === 0 ? '' : nodeValue;\n    }\n};\nconst isElementNode = (node) => node.nodeType === Node.ELEMENT_NODE;\nconst isDocumentNode = (node) => node.nodeType === Node.DOCUMENT_NODE;\nconst isTextOnlyElementNode = (node) => hasOnlyNamespaceAttributes(node) &&\n    node.children.length === 0 &&\n    node.firstChild?.nodeType === Node.TEXT_NODE;\nconst hasOnlyNamespaceAttributes = (node) => {\n    for (const attr of node.attributes) {\n        if (!isNamespaceAttributeName(attr.nodeName)) {\n            return false;\n        }\n    }\n    return true;\n};\nconst isNamespaceAttributeName = (name) => name === 'xmlns' || name.startsWith('xmlns:');\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { parser } from '../runtime';\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nexport const createXmlErrorParser = ({ noErrorWrapping = false, } = {}) => async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const { statusCode } = response;\n    const body = await parseXmlBody(response);\n    const errorLocation = noErrorWrapping ? body : body.Error;\n    const code = errorLocation?.Code\n        ? errorLocation.Code\n        : statusCode === 404\n            ? 'NotFound'\n            : statusCode.toString();\n    const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: parseMetadata(response),\n    });\n};\nexport const parseXmlBody = async (response) => {\n    if (!response.body) {\n        // S3 can return 200 without a body indicating failure.\n        throw new Error('S3 aborted request.');\n    }\n    const data = await response.body.text();\n    if (data?.length > 0) {\n        try {\n            return parser.parse(data);\n        }\n        catch (error) {\n            throw new Error(`Failed to parse XML response: ${error}`);\n        }\n    }\n    return {};\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getRetryDecider, } from '@aws-amplify/core/internals/aws-client-utils';\n/**\n * Factory of a {@link RetryDecider} function.\n *\n * @param errorParser function to parse HTTP response wth XML payload to JS\n * \tError instance.\n * @returns A structure indicating if the response is retryable; And if it is a\n * \tCredentialsExpiredError\n */\nexport const createRetryDecider = (errorParser) => async (response, error, middlewareContext) => {\n    const defaultRetryDecider = getRetryDecider(errorParser);\n    const defaultRetryDecision = await defaultRetryDecider(response, error);\n    if (!response) {\n        return { retryable: defaultRetryDecision.retryable };\n    }\n    const parsedError = await errorParser(response);\n    const errorCode = parsedError?.name;\n    const errorMessage = parsedError?.message;\n    const isCredentialsExpired = isCredentialsExpiredError(errorCode, errorMessage);\n    return {\n        retryable: defaultRetryDecision.retryable ||\n            // If we know the previous retry attempt sets isCredentialsExpired in the\n            // middleware context, we don't want to retry anymore.\n            !!(isCredentialsExpired && !middlewareContext?.isCredentialsExpired),\n        isCredentialsExpiredError: isCredentialsExpired,\n    };\n};\n// Ref: https://github.com/aws/aws-sdk-js/blob/54829e341181b41573c419bd870dd0e0f8f10632/lib/event_listeners.js#L522-L541\nconst INVALID_TOKEN_ERROR_CODES = [\n    'RequestExpired',\n    'ExpiredTokenException',\n    'ExpiredToken',\n];\n/**\n * Given an error code, returns true if it is related to invalid credentials.\n *\n * @param errorCode String representation of some error.\n * @returns True if given error indicates the credentials used to authorize request\n * are invalid.\n */\nconst isCredentialsExpiredError = (errorCode, errorMessage) => {\n    const isExpiredTokenError = !!errorCode && INVALID_TOKEN_ERROR_CODES.includes(errorCode);\n    // Ref: https://github.com/aws/aws-sdk-js/blob/54829e341181b41573c419bd870dd0e0f8f10632/lib/event_listeners.js#L536-L539\n    const isExpiredSignatureError = !!errorCode &&\n        !!errorMessage &&\n        errorCode.includes('Signature') &&\n        errorMessage.includes('expired');\n    return isExpiredTokenError || isExpiredSignatureError;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyUrl, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nimport { getDnsSuffix, jitteredBackoff, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { createRetryDecider, createXmlErrorParser } from '../utils';\nimport { LOCAL_TESTING_S3_ENDPOINT } from '../../constants';\nimport { assertValidationError } from '../../../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../../../errors/types/validation';\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\n/**\n * The service name used to sign requests if the API requires authentication.\n */\nexport const SERVICE_NAME = 's3';\n/**\n * The endpoint resolver function that returns the endpoint URL for a given region, and input parameters.\n */\nconst endpointResolver = (options, apiInput) => {\n    const { region, useAccelerateEndpoint, customEndpoint, forcePathStyle } = options;\n    let endpoint;\n    // 1. get base endpoint\n    if (customEndpoint) {\n        if (customEndpoint === LOCAL_TESTING_S3_ENDPOINT) {\n            endpoint = new AmplifyUrl(customEndpoint);\n        }\n        assertValidationError(!customEndpoint.includes('://'), StorageValidationErrorCode.InvalidCustomEndpoint);\n        endpoint = new AmplifyUrl(`https://${customEndpoint}`);\n    }\n    else if (useAccelerateEndpoint) {\n        // this ErrorCode isn't expose yet since forcePathStyle param isn't publicly exposed\n        assertValidationError(!forcePathStyle, StorageValidationErrorCode.ForcePathStyleEndpointNotSupported);\n        endpoint = new AmplifyUrl(`https://s3-accelerate.${getDnsSuffix(region)}`);\n    }\n    else {\n        endpoint = new AmplifyUrl(`https://s3.${region}.${getDnsSuffix(region)}`);\n    }\n    // 2. inject bucket name\n    if (apiInput?.Bucket) {\n        assertValidationError(isDnsCompatibleBucketName(apiInput.Bucket), StorageValidationErrorCode.DnsIncompatibleBucketName);\n        if (forcePathStyle || apiInput.Bucket.includes('.')) {\n            endpoint.pathname = `/${apiInput.Bucket}`;\n        }\n        else {\n            endpoint.host = `${apiInput.Bucket}.${endpoint.host}`;\n        }\n    }\n    return { url: endpoint };\n};\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n * @internal\n *\n * @see https://github.com/aws/aws-sdk-js-v3/blob/f2da6182298d4d6b02e84fb723492c07c27469a8/packages/middleware-bucket-endpoint/src/bucketHostnameUtils.ts#L39-L48\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nexport const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) &&\n    !IP_ADDRESS_PATTERN.test(bucketName) &&\n    !DOTS_PATTERN.test(bucketName);\n/**\n * Error parser for the XML payload of S3 data plane error response. The error's\n * `Code` and `Message` locates directly at the XML root element.\n *\n * @example\n * ```\n * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n * \t<Error>\n * \t\t<Code>NoSuchKey</Code>\n * \t\t<Message>The resource you requested does not exist</Message>\n * \t\t<Resource>/mybucket/myfoto.jpg</Resource>\n * \t\t<RequestId>4442587FB7D0A2F9</RequestId>\n * \t</Error>\n * \t```\n *\n * @internal\n */\nexport const parseXmlError = createXmlErrorParser({ noErrorWrapping: true });\n/**\n * @internal\n */\nexport const retryDecider = createRetryDecider(parseXmlError);\n/**\n * @internal\n */\nexport const defaultConfig = {\n    service: SERVICE_NAME,\n    endpointResolver,\n    retryDecider,\n    computeDelay: jitteredBackoff,\n    userAgentValue: getAmplifyUserAgent(),\n    useAccelerateEndpoint: false,\n    uriEscapePath: false, // Required by S3. See https://github.com/aws/aws-sdk-js-v3/blob/9ba012dfa3a3429aa2db0f90b3b0b3a7a31f9bc3/packages/signature-v4/src/SignatureV4.ts#L76-L83\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageError } from '../../../../../errors/StorageError';\n/**\n * Maps an object to a new object using the provided instructions.\n * The instructions are a map of the returning mapped object's property names to a single instruction of how to map the\n * value from the original object to the new object. There are two types of instructions:\n *\n * 1. A string representing the property name of the original object to map to the new object. The value mapped from\n * the original object will be the same as the value in the new object, and it can ONLY be string.\n *\n * 2. An array of two elements. The first element is the property name of the original object to map to the new object.\n * The second element is a function that takes the value from the original object and returns the value to be mapped to\n * the new object. The function can return any type.\n *\n * Example:\n * ```typescript\n * const input = {\n *   Foo: 'foo',\n *   BarList: [{value: 'bar1'}, {value: 'bar2'}]\n * }\n * const output = map(input, {\n *   someFoo: 'Foo',\n *   bar: ['BarList', (barList) => barList.map(bar => bar.value)]\n *   baz: 'Baz' // Baz does not exist in input, so it will not be in the output.\n * });\n * // output = { someFoo: 'foo', bar: ['bar1', 'bar2'] }\n * ```\n *\n * @param obj The object containing the data to compose mapped object.\n * @param instructions The instructions mapping the object values to the new object.\n * @returns A new object with the mapped values.\n *\n * @internal\n */\nexport const map = (obj, instructions) => {\n    const result = {};\n    for (const [key, instruction] of Object.entries(instructions)) {\n        const [accessor, deserializer] = Array.isArray(instruction)\n            ? instruction\n            : [instruction];\n        if (Object.prototype.hasOwnProperty.call(obj, accessor)) {\n            result[key] = deserializer\n                ? deserializer(obj[accessor])\n                : String(obj[accessor]);\n        }\n    }\n    return result;\n};\n/**\n * Deserializes a string to a number. Returns undefined if input is undefined.\n *\n * @internal\n */\nexport const deserializeNumber = (value) => value ? Number(value) : undefined;\n/**\n * Deserializes a string to a boolean. Returns undefined if input is undefined. Returns true if input is 'true',\n * otherwise false.\n *\n * @internal\n */\nexport const deserializeBoolean = (value) => {\n    return value ? value === 'true' : undefined;\n};\n/**\n * Deserializes a string to a Date. Returns undefined if input is undefined.\n * It supports epoch timestamp; rfc3339(cannot have a UTC, fractional precision supported); rfc7231(section 7.1.1.1)\n *\n * @see https://www.epoch101.com/\n * @see https://datatracker.ietf.org/doc/html/rfc3339.html#section-5.6\n * @see https://datatracker.ietf.org/doc/html/rfc7231.html#section-7.1.1.1\n *\n * @note For bundle size consideration, we use Date constructor to parse the timestamp string. There might be slight\n * difference among browsers.\n *\n * @internal\n */\nexport const deserializeTimestamp = (value) => {\n    return value ? new Date(value) : undefined;\n};\n/**\n * Create a function deserializing a string to an enum value. If the string is not a valid enum value, it throws a\n * StorageError.\n *\n * This utility is ONLY preferred if the enum value is critical. Since the enum values are hard-coded, new enum values\n * returned from service would break the library.\n *\n * @example\n * ```typescript\n * const deserializeStringEnum = createStringEnumDeserializer(['a', 'b', 'c'] as const, 'FieldName');\n * const deserializedArray = ['a', 'b', 'c'].map(deserializeStringEnum);\n * // deserializedArray = ['a', 'b', 'c']\n *\n * const invalidValue = deserializeStringEnum('d');\n * // Throws InvalidFieldName: Invalid FieldName: d\n * ```\n *\n * @internal\n */\nexport const createStringEnumDeserializer = (enumValues, fieldName) => {\n    const deserializeStringEnum = (value) => {\n        const parsedEnumValue = value\n            ? enumValues.find(enumValue => enumValue === value)\n            : undefined;\n        if (!parsedEnumValue) {\n            throw new StorageError({\n                name: `Invalid${fieldName}`,\n                message: `Invalid ${fieldName}: ${value}`,\n                recoverySuggestion: 'This is likely to be a bug. Please reach out to library authors.',\n            });\n        }\n        return parsedEnumValue;\n    };\n    return deserializeStringEnum;\n};\n/**\n * Deserializes a string to a string tag type. The function simply casts the parsed string into a given string tag type.\n * It does NOT validate the string value against the string tag. This behavior is the same to AWS SDK parsing logic of\n * string tag types.\n *\n * If you need to verify the string value, you must use {@link createStringEnumDeserializer} instead.\n *\n * @internal\n */\nexport const deserializeStringTag = (value) => String(value);\n/**\n * Function that makes sure the deserializer receives non-empty array.\n *\n * @internal\n */\nexport const emptyArrayGuard = (value, deserializer) => {\n    if (value === '') {\n        return [];\n    }\n    const valueArray = (Array.isArray(value) ? value : [value]).filter(e => e != null);\n    return deserializer(valueArray);\n};\n/**\n * @internal\n */\nexport const deserializeMetadata = (headers) => {\n    const objectMetadataHeaderPrefix = 'x-amz-meta-';\n    const deserialized = Object.keys(headers)\n        .filter(header => header.startsWith(objectMetadataHeaderPrefix))\n        .reduce((acc, header) => {\n        acc[header.replace(objectMetadataHeaderPrefix, '')] = headers[header];\n        return acc;\n    }, {});\n    return Object.keys(deserialized).length > 0 ? deserialized : undefined;\n};\n/**\n * Internal-only method to create a new StorageError from a service error with AWS SDK-compatible interfaces\n * @param error - The output of a service error parser, with AWS SDK-compatible interface(e.g. $metadata)\n * @returns A new StorageError.\n *\n * @internal\n */\nexport const buildStorageServiceError = (error) => new StorageError({\n    name: error.name,\n    message: error.message,\n    metadata: error.$metadata,\n});\n/**\n * Internal-only method used for deserializing the parts of a multipart upload.\n *\n * @internal\n */\nexport const deserializeCompletedPartList = (input) => input.map(item => map(item, {\n    PartNumber: ['PartNumber', deserializeNumber],\n    ETag: 'ETag',\n    ChecksumCRC32: 'ChecksumCRC32',\n}));\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { extendedEncodeURIComponent } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { StorageError } from '../../../../../errors/StorageError';\n/**\n * @internal\n */\nexport const assignStringVariables = (values) => {\n    const queryParams = {};\n    for (const [key, value] of Object.entries(values)) {\n        if (value != null) {\n            queryParams[key] = value.toString();\n        }\n    }\n    return queryParams;\n};\n/**\n * Serailize the parameters for configuring the S3 object. Currently used by\n * `putObject` and `createMultipartUpload` API.\n *\n * @internal\n */\nexport const serializeObjectConfigsToHeaders = async (input) => ({\n    ...assignStringVariables({\n        'x-amz-acl': input.ACL,\n        'cache-control': input.CacheControl,\n        'content-disposition': input.ContentDisposition,\n        'content-language': input.ContentLanguage,\n        'content-encoding': input.ContentEncoding,\n        'content-type': input.ContentType,\n        expires: input.Expires?.toUTCString(),\n        'x-amz-tagging': input.Tagging,\n        ...serializeMetadata(input.Metadata),\n    }),\n});\nconst serializeMetadata = (metadata = {}) => Object.keys(metadata).reduce((acc, suffix) => {\n    acc[`x-amz-meta-${suffix.toLowerCase()}`] = metadata[suffix];\n    return acc;\n}, {});\n/**\n * Serialize the object key to a URL pathname.\n * @see https://github.com/aws/aws-sdk-js-v3/blob/7ed7101dcc4e81038b6c7f581162b959e6b33a04/clients/client-s3/src/protocols/Aws_restXml.ts#L1108\n *\n * @internal\n */\nexport const serializePathnameObjectKey = (url, key) => {\n    return (url.pathname.replace(/\\/$/, '') +\n        `/${key.split('/').map(extendedEncodeURIComponent).join('/')}`);\n};\nexport function validateS3RequiredParameter(assertion, paramName) {\n    if (!assertion) {\n        throw new StorageError({\n            name: AmplifyErrorCode.Unknown,\n            message: 'An unknown error has occurred.',\n            underlyingError: new TypeError(`Expected a non-null value for S3 parameter ${paramName}`),\n            recoverySuggestion: 'This is likely to be a bug. Please reach out to library authors.',\n        });\n    }\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyErrorCode, } from '@aws-amplify/core/internals/utils';\nimport { StorageError } from './StorageError';\nexport class IntegrityError extends StorageError {\n    constructor(params) {\n        super({\n            name: AmplifyErrorCode.Unknown,\n            message: 'An unknown error has occurred.',\n            recoverySuggestion: 'This may be a bug. Please reach out to library authors.',\n            metadata: params?.metadata,\n        });\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = IntegrityError;\n        Object.setPrototypeOf(this, IntegrityError.prototype);\n    }\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { extendedEncodeURIComponent } from '@aws-amplify/core/internals/aws-client-utils';\nimport { IntegrityError } from '../../../errors/IntegrityError';\nexport function validateObjectUrl({ bucketName, key, objectURL, }) {\n    if (!bucketName || !key || !objectURL) {\n        throw new IntegrityError();\n    }\n    const bucketWithDots = bucketName.includes('.');\n    const encodedBucketName = extendedEncodeURIComponent(bucketName);\n    const encodedKey = key.split('/').map(extendedEncodeURIComponent).join('/');\n    const isPathStyleUrl = objectURL.pathname === `/${encodedBucketName}/${encodedKey}`;\n    const isSubdomainUrl = objectURL.hostname.startsWith(`${encodedBucketName}.`) &&\n        objectURL.pathname === `/${encodedKey}`;\n    if (!(isPathStyleUrl || (!bucketWithDots && isSubdomainUrl))) {\n        throw new IntegrityError();\n    }\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_SHA256_HASH, parseMetadata, presignUrl, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { CONTENT_SHA256_HEADER, assignStringVariables, buildStorageServiceError, deserializeBoolean, deserializeMetadata, deserializeNumber, deserializeTimestamp, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError, } from './base';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst getObjectSerializer = async (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'GetObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'GET',\n        headers: {\n            ...(input.Range && { Range: input.Range }),\n            ...assignStringVariables({\n                'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            }),\n        },\n        url,\n    };\n};\nconst getObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n                AcceptRanges: 'accept-ranges',\n                Expiration: 'x-amz-expiration',\n                Restore: 'x-amz-restore',\n                LastModified: ['last-modified', deserializeTimestamp],\n                ContentLength: ['content-length', deserializeNumber],\n                ETag: 'etag',\n                ChecksumCRC32: 'x-amz-checksum-crc32',\n                ChecksumCRC32C: 'x-amz-checksum-crc32c',\n                ChecksumSHA1: 'x-amz-checksum-sha1',\n                ChecksumSHA256: 'x-amz-checksum-sha256',\n                ChecksumType: 'x-amz-checksum-type',\n                MissingMeta: ['x-amz-missing-meta', deserializeNumber],\n                VersionId: 'x-amz-version-id',\n                CacheControl: 'cache-control',\n                ContentDisposition: 'content-disposition',\n                ContentEncoding: 'content-encoding',\n                ContentLanguage: 'content-language',\n                ContentRange: 'content-range',\n                ContentType: 'content-type',\n                Expires: ['expires', deserializeTimestamp],\n                WebsiteRedirectLocation: 'x-amz-website-redirect-location',\n                ServerSideEncryption: 'x-amz-server-side-encryption',\n                SSECustomerAlgorithm: 'x-amz-server-side-encryption-customer-algorithm',\n                SSECustomerKeyMD5: 'x-amz-server-side-encryption-customer-key-md5',\n                SSEKMSKeyId: 'x-amz-server-side-encryption-aws-kms-key-id',\n                BucketKeyEnabled: [\n                    'x-amz-server-side-encryption-bucket-key-enabled',\n                    deserializeBoolean,\n                ],\n                StorageClass: 'x-amz-storage-class',\n                RequestCharged: 'x-amz-request-charged',\n                ReplicationStatus: 'x-amz-replication-status',\n                PartsCount: ['x-amz-mp-parts-count', deserializeNumber],\n                TagCount: ['x-amz-tagging-count', deserializeNumber],\n                ObjectLockMode: 'x-amz-object-lock-mode',\n                ObjectLockRetainUntilDate: [\n                    'x-amz-object-lock-retain-until-date',\n                    deserializeTimestamp,\n                ],\n                ObjectLockLegalHoldStatus: 'x-amz-object-lock-legal-hold',\n            }),\n            Metadata: deserializeMetadata(response.headers),\n            $metadata: parseMetadata(response),\n            // @ts-expect-error The body is a CompatibleHttpResponse type because the lower-level handler is XHR instead of\n            // fetch, which represents payload in Blob instread of ReadableStream.\n            Body: response.body,\n        };\n    }\n};\nexport const getObject = composeServiceApi(s3TransferHandler, getObjectSerializer, getObjectDeserializer, { ...defaultConfig, responseType: 'blob' });\n/**\n * Get a presigned URL for the `getObject` API.\n *\n * @internal\n */\nexport const getPresignedGetObjectUrl = async (config, input) => {\n    const endpoint = defaultConfig.endpointResolver(config, input);\n    const { url, headers, method } = await getObjectSerializer(input, endpoint);\n    // TODO: set content sha256 query parameter with value of UNSIGNED-PAYLOAD instead of empty hash.\n    // It requires changes in presignUrl. Without this change, the generated url still works,\n    // but not the same as other tools like AWS SDK and CLI.\n    url.searchParams.append(CONTENT_SHA256_HEADER, EMPTY_SHA256_HASH);\n    if (config.userAgentValue) {\n        url.searchParams.append(config.userAgentHeader ?? USER_AGENT_HEADER, config.userAgentValue);\n    }\n    if (input.ResponseContentType) {\n        url.searchParams.append('response-content-type', input.ResponseContentType);\n    }\n    if (input.ResponseContentDisposition) {\n        url.searchParams.append('response-content-disposition', input.ResponseContentDisposition);\n    }\n    for (const [headerName, value] of Object.entries(headers).sort(([key1], [key2]) => key1.localeCompare(key2))) {\n        url.searchParams.append(headerName, value);\n    }\n    return presignUrl({ method, url, body: undefined }, {\n        signingService: defaultConfig.service,\n        signingRegion: config.region,\n        ...defaultConfig,\n        ...config,\n    });\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, deserializeBoolean, deserializeNumber, deserializeTimestamp, emptyArrayGuard, map, parseXmlBody, s3TransferHandler, } from '../utils';\nimport { IntegrityError } from '../../../../../errors/IntegrityError';\nimport { deserializeStringTag } from '../utils/deserializeHelpers';\nimport { defaultConfig, parseXmlError } from './base';\nconst listObjectsV2Serializer = (input, endpoint) => {\n    const headers = assignStringVariables({\n        'x-amz-request-payer': input.RequestPayer,\n        'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    });\n    const query = assignStringVariables({\n        'list-type': '2',\n        'continuation-token': input.ContinuationToken,\n        delimiter: input.Delimiter,\n        'encoding-type': input.EncodingType,\n        'fetch-owner': input.FetchOwner,\n        'max-keys': input.MaxKeys,\n        prefix: input.Prefix,\n        'start-after': input.StartAfter,\n    });\n    const url = new AmplifyUrl(endpoint.url.toString());\n    url.search = new AmplifyUrlSearchParams(query).toString();\n    return {\n        method: 'GET',\n        headers,\n        url,\n    };\n};\nconst listObjectsV2Deserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            CommonPrefixes: [\n                'CommonPrefixes',\n                value => emptyArrayGuard(value, deserializeCommonPrefixList),\n            ],\n            Contents: [\n                'Contents',\n                value => emptyArrayGuard(value, deserializeObjectList),\n            ],\n            ContinuationToken: 'ContinuationToken',\n            Delimiter: 'Delimiter',\n            EncodingType: ['EncodingType', (deserializeStringTag)],\n            IsTruncated: ['IsTruncated', deserializeBoolean],\n            KeyCount: ['KeyCount', deserializeNumber],\n            MaxKeys: ['MaxKeys', deserializeNumber],\n            Name: 'Name',\n            NextContinuationToken: 'NextContinuationToken',\n            Prefix: 'Prefix',\n            StartAfter: 'StartAfter',\n        });\n        const output = {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n        validateCorroboratingElements(output);\n        return output;\n    }\n};\nconst deserializeCommonPrefixList = (output) => output.map(deserializeCommonPrefix);\nconst deserializeCommonPrefix = (output) => map(output, {\n    Prefix: 'Prefix',\n});\nconst deserializeObjectList = (output) => output.map(deserializeObject);\nconst deserializeObject = (output) => map(output, {\n    Key: 'Key',\n    LastModified: ['LastModified', deserializeTimestamp],\n    ETag: 'ETag',\n    ChecksumAlgorithm: [\n        'ChecksumAlgorithm',\n        value => emptyArrayGuard(value, deserializeChecksumAlgorithmList),\n    ],\n    ChecksumType: ['ChecksumType', (deserializeStringTag)],\n    Size: ['Size', deserializeNumber],\n    StorageClass: ['StorageClass', (deserializeStringTag)],\n    Owner: ['Owner', deserializeOwner],\n});\nconst deserializeChecksumAlgorithmList = (output) => output.map((deserializeStringTag));\nconst deserializeOwner = (output) => map(output, { DisplayName: 'DisplayName', ID: 'ID' });\nconst validateCorroboratingElements = (response) => {\n    const { IsTruncated, KeyCount, Contents = [], CommonPrefixes = [], NextContinuationToken, } = response;\n    const validTruncation = (IsTruncated && !!NextContinuationToken) ||\n        (!IsTruncated && !NextContinuationToken);\n    const validNumberOfKeysReturned = KeyCount === Contents.length + CommonPrefixes.length;\n    if (!validTruncation || !validNumberOfKeysReturned) {\n        throw new IntegrityError({ metadata: response.$metadata });\n    }\n};\nexport const listObjectsV2 = composeServiceApi(s3TransferHandler, listObjectsV2Serializer, listObjectsV2Deserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst putObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders({\n            ...input,\n            ContentType: input.ContentType ?? 'application/octet-stream',\n        })),\n        ...assignStringVariables({\n            'content-md5': input.ContentMD5,\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            'If-None-Match': input.IfNoneMatch,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'PutObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst putObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                ETag: 'etag',\n                VersionId: 'x-amz-version-id',\n            }),\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const putObject = composeServiceApi(s3TransferHandler, putObjectSerializer, putObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, parseXmlBody, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders(input)),\n        ...assignStringVariables({\n            'x-amz-checksum-algorithm': input.ChecksumAlgorithm,\n            'x-amz-checksum-type': input.ChecksumType,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = 'uploads';\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'POST',\n        headers,\n        url,\n    };\n};\nconst createMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            UploadId: 'UploadId',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const createMultipartUpload = composeServiceApi(s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst uploadPartSerializer = async (input, endpoint) => {\n    const headers = {\n        ...assignStringVariables({\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'content-md5': input.ContentMD5,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n        'content-type': 'application/octet-stream',\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.PartNumber, 'PartNumber');\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        partNumber: input.PartNumber + '',\n        uploadId: input.UploadId,\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst uploadPartDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                ETag: 'etag',\n            }),\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const uploadPart = composeServiceApi(s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const isNil = (value) => {\n    return value === undefined || value === null;\n};\nexport const bothNilOrEqual = (original, output) => {\n    return (isNil(original) && isNil(output)) || original === output;\n};\n/**\n * This function is used to determine if a value is an object.\n * It excludes arrays and null values.\n *\n * @param value\n * @returns\n */\nexport const isObject = (value) => {\n    return value != null && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * This function is used to compare two objects and determine if they are equal.\n * It handles nested objects and arrays as well.\n * Array order is not taken into account.\n *\n * @param object\n * @param other\n * @returns\n */\nexport const isEqual = (object, other) => {\n    if (Array.isArray(object) && !Array.isArray(other)) {\n        return false;\n    }\n    if (!Array.isArray(object) && Array.isArray(other)) {\n        return false;\n    }\n    if (Array.isArray(object) && Array.isArray(other)) {\n        return (object.length === other.length &&\n            object.every((val, ix) => isEqual(val, other[ix])));\n    }\n    if (!isObject(object) || !isObject(other)) {\n        return object === other;\n    }\n    const objectKeys = Object.keys(object);\n    const otherKeys = Object.keys(other);\n    if (objectKeys.length !== otherKeys.length) {\n        return false;\n    }\n    return objectKeys.every(key => {\n        return (otherKeys.includes(key) &&\n            isEqual(object[key], other[key]));\n    });\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { IntegrityError } from '../../../errors/IntegrityError';\nimport { parser } from './client/runtime';\nimport { deserializeCompletedPartList, emptyArrayGuard, map, } from './client/utils';\nimport { isEqual } from './client/utils/integrityHelpers';\nexport function validateMultipartUploadXML(input, xml) {\n    if (!input.Parts) {\n        throw new IntegrityError();\n    }\n    const parsedXML = parser.parse(xml);\n    const mappedCompletedMultipartUpload = map(parsedXML, {\n        Parts: [\n            'Part',\n            value => emptyArrayGuard(value, deserializeCompletedPartList),\n        ],\n    });\n    if (!isEqual(input, mappedCompletedMultipartUpload)) {\n        throw new IntegrityError();\n    }\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, parseXmlBody, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { validateMultipartUploadXML } from '../../validateMultipartUploadXML';\nimport { defaultConfig, parseXmlError, retryDecider } from './base';\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for CompleteMultipartUpload API';\nconst MISSING_ETAG_ERROR_MSG = 'ETag missing from multipart upload';\nconst MISSING_ETAG_ERROR_SUGGESTION = 'Please ensure S3 bucket CORS configuration includes ETag as part of its `ExposeHeaders` element';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        'content-type': 'application/xml',\n        ...assignStringVariables({\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'x-amz-checksum-type': input.ChecksumType,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            'If-None-Match': input.IfNoneMatch,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        uploadId: input.UploadId,\n    }).toString();\n    validateS3RequiredParameter(!!input.MultipartUpload, 'MultipartUpload');\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const xml = serializeCompletedMultipartUpload(input.MultipartUpload);\n    validateMultipartUploadXML(input.MultipartUpload, xml);\n    return {\n        method: 'POST',\n        headers,\n        url,\n        body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + xml,\n    };\n};\nconst serializeCompletedMultipartUpload = (input) => {\n    if (!input.Parts?.length) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n    }\n    return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = (input) => {\n    if (input.PartNumber == null) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n    }\n    if (!input.ETag) {\n        throw new Error(`${MISSING_ETAG_ERROR_MSG}: ${JSON.stringify(input)}. ${MISSING_ETAG_ERROR_SUGGESTION}`);\n    }\n    const eTag = `<ETag>${input.ETag}</ETag>`;\n    const partNumber = `<PartNumber>${input.PartNumber}</PartNumber>`;\n    const checksumCRC32 = input.ChecksumCRC32\n        ? `<ChecksumCRC32>${input.ChecksumCRC32}</ChecksumCRC32>`\n        : '';\n    return `<Part>${eTag}${partNumber}${checksumCRC32}</Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async (response) => {\n    const parsed = await parseXmlBody(response); // Handles empty body case\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n        const error = await parseXmlError({\n            ...response,\n            statusCode: 500, // To workaround the >=300 status code check common to other APIs.\n        });\n        error.$metadata.httpStatusCode = response.statusCode;\n        throw buildStorageServiceError(error);\n    }\n    return parsed;\n};\nconst completeMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBodyOrThrow(response);\n        const contents = map(parsed, {\n            ETag: 'ETag',\n            Key: 'Key',\n            Location: 'Location',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error, middlewareContext) => {\n    if (!response) {\n        return { retryable: false };\n    }\n    if (response.statusCode === 200) {\n        if (!response.body) {\n            return { retryable: true };\n        }\n        const parsed = await parseXmlBody(response);\n        if (parsed.Code !== undefined && parsed.Message !== undefined) {\n            return { retryable: true };\n        }\n        return { retryable: false };\n    }\n    return retryDecider(response, error, middlewareContext);\n};\nexport const completeMultipartUpload = composeServiceApi(s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n    ...defaultConfig,\n    responseType: 'text',\n    retryDecider: retryWhenErrorWith200StatusCode,\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { buildStorageServiceError, deserializeCompletedPartList, emptyArrayGuard, map, parseXmlBody, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { defaultConfig, parseXmlError } from './base';\nconst listPartsSerializer = async (input, endpoint) => {\n    const headers = {};\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'ListParts',\n        uploadId: input.UploadId,\n    }).toString();\n    return {\n        method: 'GET',\n        headers,\n        url,\n    };\n};\nconst listPartsDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            UploadId: 'UploadId',\n            Parts: [\n                'Part',\n                value => emptyArrayGuard(value, deserializeCompletedPartList),\n            ],\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const listParts = composeServiceApi(s3TransferHandler, listPartsSerializer, listPartsDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { assignStringVariables, buildStorageServiceError, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst abortMultipartUploadSerializer = (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'AbortMultipartUpload',\n        uploadId: input.UploadId,\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const headers = {\n        ...assignStringVariables({\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    return {\n        method: 'DELETE',\n        headers,\n        url,\n    };\n};\nconst abortMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const abortMultipartUpload = composeServiceApi(s3TransferHandler, abortMultipartUploadSerializer, abortMultipartUploadDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, bothNilOrEqual, buildStorageServiceError, parseXmlBody, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { IntegrityError } from '../../../../../errors/IntegrityError';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst copyObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders(input)),\n        ...assignStringVariables({\n            'x-amz-copy-source': input.CopySource,\n            'x-amz-metadata-directive': input.MetadataDirective,\n            'x-amz-copy-source-if-match': input.CopySourceIfMatch,\n            'x-amz-copy-source-if-unmodified-since': input.CopySourceIfUnmodifiedSince?.toUTCString(),\n            'x-amz-source-expected-bucket-owner': input.ExpectedSourceBucketOwner,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    validateCopyObjectHeaders(input, headers);\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'CopyObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n    };\n};\nexport const validateCopyObjectHeaders = (input, headers) => {\n    const validations = [\n        headers['x-amz-copy-source'] === input.CopySource,\n        bothNilOrEqual(input.MetadataDirective, headers['x-amz-metadata-directive']),\n        bothNilOrEqual(input.CopySourceIfMatch, headers['x-amz-copy-source-if-match']),\n        bothNilOrEqual(input.CopySourceIfUnmodifiedSince?.toUTCString(), headers['x-amz-copy-source-if-unmodified-since']),\n    ];\n    if (validations.some(validation => !validation)) {\n        throw new IntegrityError();\n    }\n};\nconst copyObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        await parseXmlBody(response);\n        return {\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const copyObject = composeServiceApi(s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, deserializeMetadata, deserializeNumber, deserializeTimestamp, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst headObjectSerializer = async (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const headers = assignStringVariables({\n        'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    });\n    return {\n        method: 'HEAD',\n        headers,\n        url,\n    };\n};\nconst headObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const contents = {\n            ...map(response.headers, {\n                ContentLength: ['content-length', deserializeNumber],\n                ContentType: 'content-type',\n                ETag: 'etag',\n                LastModified: ['last-modified', deserializeTimestamp],\n                VersionId: 'x-amz-version-id',\n            }),\n            Metadata: deserializeMetadata(response.headers),\n        };\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const headObject = composeServiceApi(s3TransferHandler, headObjectSerializer, headObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, deserializeBoolean, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { deserializeStringTag } from '../utils/deserializeHelpers';\nimport { defaultConfig, parseXmlError } from './base';\nconst deleteObjectSerializer = (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'DeleteObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const headers = assignStringVariables({\n        'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    });\n    return {\n        method: 'DELETE',\n        headers,\n        url,\n    };\n};\nconst deleteObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const content = map(response.headers, {\n            DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n            VersionId: 'x-amz-version-id',\n            RequestCharged: [\n                'x-amz-request-charged',\n                (deserializeStringTag),\n            ],\n        });\n        return {\n            ...content,\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const deleteObject = composeServiceApi(s3TransferHandler, deleteObjectSerializer, deleteObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Category, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nexport function getStorageUserAgentValue(action) {\n    return getAmplifyUserAgent({\n        category: Category.Storage,\n        action,\n    });\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { toBase64 } from './client/runtime';\nexport const hexToUint8Array = (hexString) => new Uint8Array((hexString.match(/\\w{2}/g) ?? []).map(h => parseInt(h, 16)));\nexport const hexToBase64 = (hexString) => toBase64(hexToUint8Array(hexString));\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport crc32 from 'crc-32';\nimport { hexToBase64 } from './hexUtils';\nimport { readFile } from './readFile';\nconst CHUNK_SIZE = 1024 * 1024; // 1MB chunks\n/**\n * Calculate the CRC32 checksum for given content and return base64 encoded checksum.\n */\nexport const calculateContentCRC32 = async (content, seed = 0) => {\n    let internalSeed = seed;\n    if (content instanceof ArrayBuffer || ArrayBuffer.isView(content)) {\n        let uint8Array;\n        if (content instanceof ArrayBuffer) {\n            uint8Array = new Uint8Array(content);\n        }\n        else {\n            uint8Array = new Uint8Array(content.buffer, content.byteOffset, content.byteLength);\n        }\n        let offset = 0;\n        while (offset < uint8Array.length) {\n            const end = Math.min(offset + CHUNK_SIZE, uint8Array.length);\n            const chunk = uint8Array.slice(offset, end);\n            internalSeed = crc32.buf(chunk, internalSeed) >>> 0;\n            offset = end;\n        }\n    }\n    else {\n        let blob;\n        if (content instanceof Blob) {\n            blob = content;\n        }\n        else {\n            blob = new Blob([content]);\n        }\n        let offset = 0;\n        while (offset < blob.size) {\n            const end = Math.min(offset + CHUNK_SIZE, blob.size);\n            const chunk = blob.slice(offset, end);\n            const arrayBuffer = await readFile(chunk);\n            const uint8Array = new Uint8Array(arrayBuffer);\n            internalSeed = crc32.buf(uint8Array, internalSeed) >>> 0;\n            offset = end;\n        }\n    }\n    const hex = internalSeed.toString(16).padStart(8, '0');\n    return hexToBase64(hex);\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const constructContentDisposition = (contentDisposition) => {\n    if (!contentDisposition)\n        return undefined;\n    if (typeof contentDisposition === 'string')\n        return contentDisposition;\n    const { type, filename } = contentDisposition;\n    return filename !== undefined ? `${type}; filename=\"${filename}\"` : type;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { calculateContentMd5, resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../../utils';\nimport { putObject } from '../../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../../utils/userAgent';\nimport { CHECKSUM_ALGORITHM_CRC32, STORAGE_INPUT_KEY, } from '../../../utils/constants';\nimport { calculateContentCRC32 } from '../../../utils/crc32';\nimport { constructContentDisposition } from '../../../utils/constructContentDisposition';\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nexport const putObjectJob = (uploadDataInput, abortSignal, totalLength) => async () => {\n    const { options: uploadDataOptions, data } = uploadDataInput;\n    const { bucket, keyPrefix, s3Config, isObjectLockEnabled, identityId } = await resolveS3ConfigAndInput(Amplify, uploadDataInput);\n    const { inputType, objectKey } = validateStorageOperationInput(uploadDataInput, identityId);\n    validateBucketOwnerID(uploadDataOptions?.expectedBucketOwner);\n    const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    const { contentDisposition, contentEncoding, contentType = 'application/octet-stream', preventOverwrite, metadata, checksumAlgorithm, onProgress, expectedBucketOwner, } = uploadDataOptions ?? {};\n    const checksumCRC32 = checksumAlgorithm === CHECKSUM_ALGORITHM_CRC32\n        ? await calculateContentCRC32(data)\n        : undefined;\n    const contentMD5 = \n    // check if checksum exists. ex: should not exist in react native\n    !checksumCRC32 && isObjectLockEnabled\n        ? await calculateContentMd5(data)\n        : undefined;\n    const { ETag: eTag, VersionId: versionId } = await putObject({\n        ...s3Config,\n        abortSignal,\n        onUploadProgress: onProgress,\n        userAgentValue: getStorageUserAgentValue(StorageAction.UploadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        Body: data,\n        ContentType: contentType,\n        ContentDisposition: constructContentDisposition(contentDisposition),\n        ContentEncoding: contentEncoding,\n        Metadata: metadata,\n        ContentMD5: contentMD5,\n        ChecksumCRC32: checksumCRC32,\n        ExpectedBucketOwner: expectedBucketOwner,\n        IfNoneMatch: preventOverwrite ? '*' : undefined,\n    });\n    const result = {\n        eTag,\n        versionId,\n        contentType,\n        metadata,\n        size: totalLength,\n    };\n    return inputType === STORAGE_INPUT_KEY\n        ? { key: objectKey, ...result }\n        : { path: objectKey, ...result };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { uploadPart } from '../../../../utils/client/s3data';\nimport { logger } from '../../../../../../utils';\nimport { calculateContentCRC32 } from '../../../../utils/crc32';\nimport { calculateContentMd5 } from '../../../../utils';\nexport const uploadPartExecutor = async ({ dataChunkerGenerator, completedPartNumberSet, s3Config, abortSignal, bucket, finalKey, uploadId, onPartUploadCompletion, onProgress, isObjectLockEnabled, useCRC32Checksum, expectedBucketOwner, }) => {\n    let transferredBytes = 0;\n    for (const { data, partNumber, size } of dataChunkerGenerator) {\n        if (abortSignal.aborted) {\n            logger.debug('upload executor aborted.');\n            break;\n        }\n        if (completedPartNumberSet.has(partNumber)) {\n            logger.debug(`part ${partNumber} already uploaded.`);\n            transferredBytes += size;\n            onProgress?.({\n                transferredBytes,\n            });\n        }\n        else {\n            // handle cancel error\n            let checksumCRC32;\n            if (useCRC32Checksum) {\n                checksumCRC32 = await calculateContentCRC32(data);\n            }\n            const contentMD5 = \n            // check if checksum exists. ex: should not exist in react native\n            !checksumCRC32 && isObjectLockEnabled\n                ? await calculateContentMd5(data)\n                : undefined;\n            const { ETag: eTag } = await uploadPart({\n                ...s3Config,\n                abortSignal,\n                onUploadProgress: (event) => {\n                    const { transferredBytes: currentPartTransferredBytes } = event;\n                    onProgress?.({\n                        transferredBytes: transferredBytes + currentPartTransferredBytes,\n                    });\n                },\n            }, {\n                Bucket: bucket,\n                Key: finalKey,\n                UploadId: uploadId,\n                Body: data,\n                PartNumber: partNumber,\n                ChecksumCRC32: checksumCRC32,\n                ContentMD5: contentMD5,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n            transferredBytes += size;\n            // eTag will always be set even the S3 model interface marks it as optional.\n            onPartUploadCompletion(partNumber, eTag, checksumCRC32);\n        }\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { UPLOADS_STORAGE_KEY } from '../../../../utils/constants';\nimport { listParts } from '../../../../utils/client/s3data';\nimport { logger } from '../../../../../../utils';\nconst ONE_HOUR = 1000 * 60 * 60;\n/**\n * Find the cached multipart upload id and get the parts that have been uploaded\n * with ListParts API. If the cached upload is expired(1 hour), return null.\n */\nexport const findCachedUploadPartsAndEvictExpired = async ({ resumableUploadsCache, cacheKey, s3Config, bucket, finalKey, }) => {\n    const allCachedUploads = await listCachedUploadTasks(resumableUploadsCache);\n    // Evict all outdated uploads.\n    const validCachedUploads = Object.fromEntries(Object.entries(allCachedUploads).filter(([_, cacheValue]) => cacheValue.lastTouched >= Date.now() - ONE_HOUR));\n    if (Object.keys(validCachedUploads).length !==\n        Object.keys(allCachedUploads).length) {\n        await resumableUploadsCache.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(validCachedUploads));\n    }\n    if (!validCachedUploads[cacheKey]) {\n        return null;\n    }\n    const cachedUpload = validCachedUploads[cacheKey];\n    cachedUpload.lastTouched = Date.now();\n    await resumableUploadsCache.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(validCachedUploads));\n    try {\n        const { Parts = [] } = await listParts(s3Config, {\n            Bucket: bucket,\n            Key: finalKey,\n            UploadId: cachedUpload.uploadId,\n        });\n        return {\n            parts: Parts,\n            uploadId: cachedUpload.uploadId,\n            finalCrc32: cachedUpload.finalCrc32,\n        };\n    }\n    catch (e) {\n        logger.debug('failed to list cached parts, removing cached upload.');\n        await removeCachedUpload(resumableUploadsCache, cacheKey);\n        return null;\n    }\n};\nconst listCachedUploadTasks = async (resumableUploadsCache) => {\n    try {\n        return JSON.parse((await resumableUploadsCache.getItem(UPLOADS_STORAGE_KEY)) ?? '{}');\n    }\n    catch (e) {\n        logger.debug('failed to parse cached uploads record.');\n        return {};\n    }\n};\n/**\n * Serialize the uploadData API options to string so it can be hashed.\n */\nexport const serializeUploadOptions = (options = {}) => {\n    const unserializableOptionProperties = [\n        'onProgress',\n        'resumableUploadsCache', // Internally injected implementation not set by customers\n        'locationCredentialsProvider', // Internally injected implementation not set by customers\n    ];\n    const serializableOptionEntries = Object.entries(options).filter(([key]) => !unserializableOptionProperties.includes(key));\n    if (options.checksumAlgorithm === 'crc-32') {\n        // Additional options to differentiate the upload cache created before introducing the full-object checksum and\n        // after. If full-object checksum is enabled, the previous upload caches that created with composite checksum should\n        // be ignored.\n        serializableOptionEntries.push(['checksumType', 'FULL_OBJECT']);\n    }\n    const serializableOptions = Object.fromEntries(serializableOptionEntries);\n    return JSON.stringify(serializableOptions);\n};\n/**\n * Get the cache key of a multipart upload. Data source cached by different: size, content type, bucket, access level,\n * key. If the data source is a File instance, the upload is additionally indexed by file name and last modified time.\n * So the library always created a new multipart upload if the file is modified.\n */\nexport const getUploadsCacheKey = ({ file, size, contentType, bucket, accessLevel, key, optionsHash, }) => {\n    let levelStr;\n    const resolvedContentType = contentType ?? file?.type ?? 'application/octet-stream';\n    // If no access level is defined, we're using custom gen2 access rules\n    if (accessLevel === undefined) {\n        levelStr = 'custom';\n    }\n    else {\n        levelStr = accessLevel === 'guest' ? 'public' : accessLevel;\n    }\n    const baseId = `${optionsHash}_${size}_${resolvedContentType}_${bucket}_${levelStr}_${key}`;\n    if (file) {\n        return `${file.name}_${file.lastModified}_${baseId}`;\n    }\n    else {\n        return baseId;\n    }\n};\nexport const cacheMultipartUpload = async (resumableUploadsCache, cacheKey, fileMetadata) => {\n    const cachedUploads = await listCachedUploadTasks(resumableUploadsCache);\n    cachedUploads[cacheKey] = {\n        ...fileMetadata,\n        lastTouched: Date.now(),\n    };\n    await resumableUploadsCache.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n};\nexport const removeCachedUpload = async (resumableUploadsCache, cacheKey) => {\n    const cachedUploads = await listCachedUploadTasks(resumableUploadsCache);\n    delete cachedUploads[cacheKey];\n    await resumableUploadsCache.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(cachedUploads));\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Track the progress from multiple concurrent uploads, and invoke the onProgress callback.\n *\n * @internal\n */\nexport const getConcurrentUploadsProgressTracker = ({ size, onProgress, }) => {\n    const transferredBytesPerListener = [];\n    const getTransferredBytes = () => transferredBytesPerListener.reduce((acc, transferredBytes) => acc + transferredBytes, 0);\n    return {\n        getOnProgressListener: () => {\n            transferredBytesPerListener.push(0);\n            const listenerIndex = transferredBytesPerListener.length - 1;\n            return (event) => {\n                const { transferredBytes } = event;\n                transferredBytesPerListener[listenerIndex] = transferredBytes;\n                onProgress?.({\n                    transferredBytes: getTransferredBytes(),\n                    totalBytes: size,\n                });\n            };\n        },\n    };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createMultipartUpload } from '../../../../utils/client/s3data';\nimport { logger } from '../../../../../../utils';\nimport { constructContentDisposition } from '../../../../utils/constructContentDisposition';\nimport { CHECKSUM_ALGORITHM_CRC32 } from '../../../../utils/constants';\nimport { calculateContentCRC32 } from '../../../../utils/crc32';\nimport { cacheMultipartUpload, findCachedUploadPartsAndEvictExpired, getUploadsCacheKey, } from './uploadCache';\n/**\n * Load the in-progress multipart upload from local storage or async storage(RN) if it exists, or create a new multipart\n * upload.\n *\n * @internal\n */\nexport const loadOrCreateMultipartUpload = async ({ s3Config, data, size, contentType, bucket, accessLevel, keyPrefix, key, contentDisposition, contentEncoding, metadata, abortSignal, checksumAlgorithm, optionsHash, resumableUploadsCache, expectedBucketOwner, }) => {\n    const finalKey = keyPrefix !== undefined ? keyPrefix + key : key;\n    let cachedUpload;\n    if (!resumableUploadsCache) {\n        logger.debug('uploaded cache instance cannot be determined, skipping cache.');\n        cachedUpload = undefined;\n    }\n    else {\n        const uploadCacheKey = getUploadsCacheKey({\n            size,\n            contentType,\n            file: data instanceof File ? data : undefined,\n            bucket,\n            accessLevel,\n            key,\n            optionsHash,\n        });\n        const cachedUploadParts = await findCachedUploadPartsAndEvictExpired({\n            s3Config,\n            cacheKey: uploadCacheKey,\n            bucket,\n            finalKey,\n            resumableUploadsCache,\n        });\n        cachedUpload = cachedUploadParts\n            ? { ...cachedUploadParts, uploadCacheKey }\n            : undefined;\n    }\n    if (cachedUpload) {\n        return {\n            uploadId: cachedUpload.uploadId,\n            cachedParts: cachedUpload.parts,\n            finalCrc32: cachedUpload.finalCrc32,\n        };\n    }\n    else {\n        /**\n         * Note: This step reads the uploading file from beginning to end to calculate the CRC32 checksum of the entire\n         * object before sending the 1st byte over the wire. This is a performance bottleneck when uploading large files.\n         * The rationale to do this is S3 team wants to reduce the possibility of a file getting corrupted(on disk or in\n         * memory). So we calculate the full-object checksum as soon as possible in the upload flow.\n         *\n         * Going forward we should re-evaluate this decision with S3 team. The alternative is calling calculateContentCRC32()\n         * as we upload each part sequentially with seeds from already uploaded parts, ideally inside the data chunker.\n         */\n        const finalCrc32 = checksumAlgorithm === CHECKSUM_ALGORITHM_CRC32\n            ? await calculateContentCRC32(data)\n            : undefined;\n        const { UploadId } = await createMultipartUpload({\n            ...s3Config,\n            abortSignal,\n        }, {\n            Bucket: bucket,\n            Key: finalKey,\n            ContentType: contentType,\n            ContentDisposition: constructContentDisposition(contentDisposition),\n            ContentEncoding: contentEncoding,\n            Metadata: metadata,\n            ChecksumAlgorithm: finalCrc32 ? 'CRC32' : undefined,\n            ChecksumType: finalCrc32 ? 'FULL_OBJECT' : undefined,\n            ExpectedBucketOwner: expectedBucketOwner,\n        });\n        if (resumableUploadsCache) {\n            const uploadCacheKey = getUploadsCacheKey({\n                size,\n                contentType,\n                file: data instanceof File ? data : undefined,\n                bucket,\n                accessLevel,\n                key,\n                optionsHash,\n            });\n            await cacheMultipartUpload(resumableUploadsCache, uploadCacheKey, {\n                uploadId: UploadId,\n                bucket,\n                key,\n                finalCrc32,\n                fileName: data instanceof File ? data.name : '',\n            });\n        }\n        return {\n            uploadId: UploadId,\n            cachedParts: [],\n            finalCrc32,\n        };\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DEFAULT_PART_SIZE, MAX_PARTS_COUNT, } from '../../../../utils/constants';\nexport const calculatePartSize = (totalSize) => {\n    if (!totalSize) {\n        return DEFAULT_PART_SIZE;\n    }\n    let partSize = DEFAULT_PART_SIZE;\n    let partsCount = Math.ceil(totalSize / partSize);\n    while (partsCount > MAX_PARTS_COUNT) {\n        partSize *= 2;\n        partsCount = Math.ceil(totalSize / partSize);\n    }\n    return partSize;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageValidationErrorCode, validationErrorMap, } from '../../../../../../errors/types/validation';\nimport { StorageError } from '../../../../../../errors/StorageError';\nimport { calculatePartSize } from './calculatePartSize';\nexport const getDataChunker = (data, totalSize) => {\n    const partSize = calculatePartSize(totalSize);\n    if (data instanceof Blob) {\n        return helper(data, 0, data.size, partSize);\n    }\n    else if (ArrayBuffer.isView(data)) {\n        return helper(data.buffer, data.byteOffset, data.byteLength, partSize);\n    }\n    else if (data instanceof ArrayBuffer) {\n        return helper(data, 0, data.byteLength, partSize);\n    }\n    else if (typeof data === 'string') {\n        const blob = new Blob([data]);\n        return getDataChunker(blob, blob.size);\n    }\n    else {\n        throw new StorageError({\n            name: StorageValidationErrorCode.InvalidUploadSource,\n            ...validationErrorMap[StorageValidationErrorCode.InvalidUploadSource],\n        });\n    }\n};\nconst helper = function* (buffer, byteOffset, byteLength, partSize) {\n    let partNumber = 1;\n    let startByte = byteOffset;\n    let endByte = byteOffset + Math.min(partSize, byteLength);\n    while (endByte < byteLength + byteOffset) {\n        yield {\n            partNumber,\n            data: buffer.slice(startByte, endByte),\n            size: partSize,\n        };\n        partNumber += 1;\n        startByte = endByte;\n        endByte = startByte + partSize;\n    }\n    yield {\n        partNumber,\n        data: buffer.slice(startByte, byteLength + byteOffset),\n        size: byteLength + byteOffset - startByte,\n    };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, validateStorageOperationInput, } from '../../../../utils';\nimport { DEFAULT_ACCESS_LEVEL, DEFAULT_QUEUE_SIZE, STORAGE_INPUT_KEY, } from '../../../../utils/constants';\nimport { StorageError } from '../../../../../../errors/StorageError';\nimport { CanceledError } from '../../../../../../errors/CanceledError';\nimport { abortMultipartUpload, completeMultipartUpload, headObject, } from '../../../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../../../utils/userAgent';\nimport { logger } from '../../../../../../utils';\nimport { calculateContentCRC32 } from '../../../../utils/crc32';\nimport { IntegrityError } from '../../../../../../errors/IntegrityError';\nimport { uploadPartExecutor } from './uploadPartExecutor';\nimport { getUploadsCacheKey, removeCachedUpload, serializeUploadOptions, } from './uploadCache';\nimport { getConcurrentUploadsProgressTracker } from './progressTracker';\nimport { loadOrCreateMultipartUpload } from './initialUpload';\nimport { getDataChunker } from './getDataChunker';\nimport { calculatePartSize } from './calculatePartSize';\n/**\n * Create closure hiding the multipart upload implementation details and expose the upload job and control functions(\n * onPause, onResume, onCancel).\n *\n * @internal\n */\nexport const getMultipartUploadHandlers = (uploadDataInput, size) => {\n    let resolveCallback;\n    let rejectCallback;\n    let inProgressUpload;\n    let resolvedS3Config;\n    let abortController;\n    let resolvedAccessLevel;\n    let resolvedBucket;\n    let resolvedKeyPrefix;\n    let resolvedIdentityId;\n    let uploadCacheKey;\n    let finalKey;\n    let expectedBucketOwner;\n    // Special flag that differentiates HTTP requests abort error caused by pause() from ones caused by cancel().\n    // The former one should NOT cause the upload job to throw, but cancels any pending HTTP requests.\n    // This should be replaced by a special abort reason. However,the support of this API is lagged behind.\n    let isAbortSignalFromPause = false;\n    const { resumableUploadsCache } = uploadDataInput.options ?? {};\n    const startUpload = async () => {\n        const { options: uploadDataOptions, data } = uploadDataInput;\n        const resolvedS3Options = await resolveS3ConfigAndInput(Amplify, uploadDataInput);\n        abortController = new AbortController();\n        isAbortSignalFromPause = false;\n        resolvedS3Config = resolvedS3Options.s3Config;\n        resolvedBucket = resolvedS3Options.bucket;\n        resolvedIdentityId = resolvedS3Options.identityId;\n        expectedBucketOwner = uploadDataOptions?.expectedBucketOwner;\n        const { inputType, objectKey } = validateStorageOperationInput(uploadDataInput, resolvedIdentityId);\n        const { contentDisposition, contentEncoding, contentType = 'application/octet-stream', metadata, preventOverwrite, onProgress, } = uploadDataOptions ?? {};\n        finalKey = objectKey;\n        // Resolve \"key\" specific options\n        if (inputType === STORAGE_INPUT_KEY) {\n            const accessLevel = uploadDataOptions\n                ?.accessLevel;\n            resolvedKeyPrefix = resolvedS3Options.keyPrefix;\n            finalKey = resolvedKeyPrefix + objectKey;\n            resolvedAccessLevel = resolveAccessLevel(accessLevel);\n        }\n        const optionsHash = await calculateContentCRC32(serializeUploadOptions(uploadDataOptions));\n        if (!inProgressUpload) {\n            const { uploadId, cachedParts, finalCrc32 } = await loadOrCreateMultipartUpload({\n                s3Config: resolvedS3Config,\n                accessLevel: resolvedAccessLevel,\n                bucket: resolvedBucket,\n                keyPrefix: resolvedKeyPrefix,\n                key: objectKey,\n                contentType,\n                contentDisposition,\n                contentEncoding,\n                metadata,\n                data,\n                size,\n                abortSignal: abortController.signal,\n                checksumAlgorithm: uploadDataOptions?.checksumAlgorithm,\n                optionsHash,\n                resumableUploadsCache,\n                expectedBucketOwner,\n            });\n            inProgressUpload = {\n                uploadId,\n                completedParts: cachedParts,\n                finalCrc32,\n            };\n        }\n        uploadCacheKey = size\n            ? getUploadsCacheKey({\n                file: data instanceof File ? data : undefined,\n                accessLevel: resolvedAccessLevel,\n                contentType: uploadDataOptions?.contentType,\n                bucket: resolvedBucket,\n                size,\n                key: objectKey,\n                optionsHash,\n            })\n            : undefined;\n        const dataChunker = getDataChunker(data, size);\n        const completedPartNumberSet = new Set(inProgressUpload.completedParts.map(({ PartNumber }) => PartNumber));\n        const onPartUploadCompletion = (partNumber, eTag, crc32) => {\n            inProgressUpload?.completedParts.push({\n                PartNumber: partNumber,\n                ETag: eTag,\n                // TODO: crc32 can always be added once RN also has an implementation\n                ...(crc32 ? { ChecksumCRC32: crc32 } : {}),\n            });\n        };\n        const concurrentUploadsProgressTracker = getConcurrentUploadsProgressTracker({\n            size,\n            onProgress,\n        });\n        const concurrentUploadPartExecutors = [];\n        for (let index = 0; index < DEFAULT_QUEUE_SIZE; index++) {\n            concurrentUploadPartExecutors.push(uploadPartExecutor({\n                dataChunkerGenerator: dataChunker,\n                completedPartNumberSet,\n                s3Config: resolvedS3Config,\n                abortSignal: abortController.signal,\n                bucket: resolvedBucket,\n                finalKey,\n                uploadId: inProgressUpload.uploadId,\n                onPartUploadCompletion,\n                onProgress: concurrentUploadsProgressTracker.getOnProgressListener(),\n                isObjectLockEnabled: resolvedS3Options.isObjectLockEnabled,\n                useCRC32Checksum: Boolean(inProgressUpload.finalCrc32),\n                expectedBucketOwner,\n            }));\n        }\n        await Promise.all(concurrentUploadPartExecutors);\n        validateCompletedParts(inProgressUpload.completedParts, size);\n        const { ETag: eTag } = await completeMultipartUpload({\n            ...resolvedS3Config,\n            abortSignal: abortController.signal,\n            userAgentValue: getStorageUserAgentValue(StorageAction.UploadData),\n        }, {\n            Bucket: resolvedBucket,\n            Key: finalKey,\n            UploadId: inProgressUpload.uploadId,\n            ChecksumCRC32: inProgressUpload.finalCrc32,\n            ChecksumType: inProgressUpload.finalCrc32 ? 'FULL_OBJECT' : undefined,\n            IfNoneMatch: preventOverwrite ? '*' : undefined,\n            MultipartUpload: {\n                Parts: sortUploadParts(inProgressUpload.completedParts),\n            },\n            ExpectedBucketOwner: expectedBucketOwner,\n        });\n        // If full-object CRC32 checksum is NOT enabled, we need to ensure the upload integrity by making extra HEAD call\n        // to verify the uploaded object size.\n        if (!inProgressUpload.finalCrc32) {\n            const { ContentLength: uploadedObjectSize, $metadata } = await headObject(resolvedS3Config, {\n                Bucket: resolvedBucket,\n                Key: finalKey,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n            if (uploadedObjectSize && uploadedObjectSize !== size) {\n                throw new StorageError({\n                    name: 'Error',\n                    message: `Upload failed. Expected object size ${size}, but got ${uploadedObjectSize}.`,\n                    metadata: $metadata,\n                });\n            }\n        }\n        if (resumableUploadsCache && uploadCacheKey) {\n            await removeCachedUpload(resumableUploadsCache, uploadCacheKey);\n        }\n        const result = {\n            eTag,\n            contentType,\n            metadata,\n        };\n        return inputType === STORAGE_INPUT_KEY\n            ? { key: objectKey, ...result }\n            : { path: objectKey, ...result };\n    };\n    const startUploadWithResumability = () => startUpload()\n        .then(resolveCallback)\n        .catch(error => {\n        const abortSignal = abortController?.signal;\n        if (abortSignal?.aborted && isAbortSignalFromPause) {\n            logger.debug('upload paused.');\n        }\n        else {\n            // Uncaught errors should be exposed to the users.\n            rejectCallback(error);\n        }\n    });\n    const multipartUploadJob = () => new Promise((resolve, reject) => {\n        resolveCallback = resolve;\n        rejectCallback = reject;\n        startUploadWithResumability();\n    });\n    const onPause = () => {\n        isAbortSignalFromPause = true;\n        abortController?.abort();\n    };\n    const onResume = () => {\n        startUploadWithResumability();\n    };\n    const onCancel = (message) => {\n        // 1. abort in-flight API requests\n        abortController?.abort(message);\n        const cancelUpload = async () => {\n            // 2. clear upload cache.\n            if (uploadCacheKey && resumableUploadsCache) {\n                await removeCachedUpload(resumableUploadsCache, uploadCacheKey);\n            }\n            // 3. clear multipart upload on server side.\n            await abortMultipartUpload(resolvedS3Config, {\n                Bucket: resolvedBucket,\n                Key: finalKey,\n                UploadId: inProgressUpload?.uploadId,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n        };\n        cancelUpload().catch(e => {\n            logger.debug('error when cancelling upload task.', e);\n        });\n        rejectCallback(\n        // Internal error that should not be exposed to the users. They should use isCancelError() to check if\n        // the error is caused by cancel().\n        new CanceledError(message ? { message } : undefined));\n    };\n    return {\n        multipartUploadJob,\n        onPause,\n        onResume,\n        onCancel,\n    };\n};\nconst resolveAccessLevel = (accessLevel) => accessLevel ??\n    Amplify.libraryOptions.Storage?.S3?.defaultAccessLevel ??\n    DEFAULT_ACCESS_LEVEL;\nconst validateCompletedParts = (completedParts, size) => {\n    const partsExpected = Math.ceil(size / calculatePartSize(size));\n    const validPartCount = completedParts.length === partsExpected;\n    const sorted = sortUploadParts(completedParts);\n    const validPartNumbers = sorted.every((part, index) => part.PartNumber === index + 1);\n    if (!validPartCount || !validPartNumbers) {\n        throw new IntegrityError();\n    }\n};\nconst sortUploadParts = (parts) => {\n    return [...parts].sort((partA, partB) => partA.PartNumber - partB.PartNumber);\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createUploadTask } from '../../../utils';\nimport { assertValidationError } from '../../../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../../../errors/types/validation';\nimport { DEFAULT_PART_SIZE, MAX_OBJECT_SIZE } from '../../../utils/constants';\nimport { byteLength } from './byteLength';\nimport { putObjectJob } from './putObjectJob';\nimport { getMultipartUploadHandlers, } from './multipart';\nexport const uploadData = (input) => {\n    const { data } = input;\n    const dataByteLength = byteLength(data);\n    // Using InvalidUploadSource error code because the input data must NOT be any\n    // of permitted Blob, string, ArrayBuffer(View) if byteLength could not be determined.\n    assertValidationError(dataByteLength !== undefined, StorageValidationErrorCode.InvalidUploadSource);\n    assertValidationError(dataByteLength <= MAX_OBJECT_SIZE, StorageValidationErrorCode.ObjectIsTooLarge);\n    if (dataByteLength <= DEFAULT_PART_SIZE) {\n        // Single part upload\n        const abortController = new AbortController();\n        return createUploadTask({\n            isMultipartUpload: false,\n            job: putObjectJob(input, abortController.signal, dataByteLength),\n            onCancel: (message) => {\n                abortController.abort(message);\n            },\n        });\n    }\n    else {\n        // Multipart upload\n        const { multipartUploadJob, onPause, onResume, onCancel } = getMultipartUploadHandlers(input, dataByteLength);\n        return createUploadTask({\n            isMultipartUpload: true,\n            job: multipartUploadJob,\n            onCancel: (message) => {\n                onCancel(message);\n            },\n            onPause,\n            onResume,\n        });\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { defaultStorage } from '@aws-amplify/core';\nimport { uploadData as uploadDataInternal } from './internal/uploadData';\nexport function uploadData(input) {\n    return uploadDataInternal({\n        ...input,\n        options: {\n            ...input?.options,\n            // This option enables caching in-progress multipart uploads.\n            // It's ONLY needed for client-side API.\n            resumableUploadsCache: defaultStorage,\n        },\n    });\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput';\nimport { createDownloadTask, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { getObject } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { STORAGE_INPUT_KEY } from '../../utils/constants';\nexport const downloadData = (input) => {\n    const abortController = new AbortController();\n    const downloadTask = createDownloadTask({\n        job: downloadDataJob(input, abortController.signal),\n        onCancel: (message) => {\n            abortController.abort(message);\n        },\n    });\n    return downloadTask;\n};\nconst downloadDataJob = (downloadDataInput, abortSignal) => async () => {\n    const { options: downloadDataOptions } = downloadDataInput;\n    const { bucket, keyPrefix, s3Config, identityId } = await resolveS3ConfigAndInput(Amplify, downloadDataInput);\n    const { inputType, objectKey } = validateStorageOperationInput(downloadDataInput, identityId);\n    validateBucketOwnerID(downloadDataOptions?.expectedBucketOwner);\n    const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    logger.debug(`download ${objectKey} from ${finalKey}.`);\n    const { Body: body, LastModified: lastModified, ContentLength: size, ETag: eTag, Metadata: metadata, VersionId: versionId, ContentType: contentType, } = await getObject({\n        ...s3Config,\n        abortSignal,\n        onDownloadProgress: downloadDataOptions?.onProgress,\n        userAgentValue: getStorageUserAgentValue(StorageAction.DownloadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ...(downloadDataOptions?.bytesRange && {\n            Range: `bytes=${downloadDataOptions.bytesRange.start}-${downloadDataOptions.bytesRange.end}`,\n        }),\n        ExpectedBucketOwner: downloadDataOptions?.expectedBucketOwner,\n    });\n    const result = {\n        body,\n        lastModified,\n        size,\n        contentType,\n        eTag,\n        metadata,\n        versionId,\n    };\n    return inputType === STORAGE_INPUT_KEY\n        ? { key: objectKey, ...result }\n        : { path: objectKey, ...result };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { downloadData as downloadDataInternal } from './internal/downloadData';\nexport function downloadData(input) {\n    return downloadDataInternal(input);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { deleteObject } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { STORAGE_INPUT_KEY } from '../../utils/constants';\nexport const remove = async (amplify, input) => {\n    const { s3Config, keyPrefix, bucket, identityId } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInput(input, identityId);\n    validateBucketOwnerID(input.options?.expectedBucketOwner);\n    let finalKey;\n    if (inputType === STORAGE_INPUT_KEY) {\n        finalKey = `${keyPrefix}${objectKey}`;\n        logger.debug(`remove \"${objectKey}\" from \"${finalKey}\".`);\n    }\n    else {\n        finalKey = objectKey;\n        logger.debug(`removing object in path \"${finalKey}\"`);\n    }\n    await deleteObject({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.Remove),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ExpectedBucketOwner: input.options?.expectedBucketOwner,\n    });\n    return inputType === STORAGE_INPUT_KEY\n        ? {\n            key: objectKey,\n        }\n        : {\n            path: objectKey,\n        };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { remove as removeInternal } from './internal/remove';\nexport function remove(input) {\n    return removeInternal(Amplify, input);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { STORAGE_INPUT_PATH, STORAGE_INPUT_PREFIX } from './constants';\nimport { resolveIdentityId } from './resolveIdentityId';\n// Local assertion function with StorageOperationInputWithPrefixPath as Input\nconst _isInputWithPath = (input) => {\n    return input.path !== undefined;\n};\nexport const validateStorageOperationInputWithPrefix = (input, identityId) => {\n    // Validate prefix & path not present at the same time\n    assertValidationError(!(input.prefix && input.path), StorageValidationErrorCode.InvalidStorageOperationPrefixInput);\n    if (_isInputWithPath(input)) {\n        const { path } = input;\n        const objectKey = typeof path === 'string'\n            ? path\n            : path({ identityId: resolveIdentityId(identityId) });\n        // Assert on no leading slash in the path parameter\n        assertValidationError(!objectKey.startsWith('/'), StorageValidationErrorCode.InvalidStoragePathInput);\n        return {\n            inputType: STORAGE_INPUT_PATH,\n            objectKey,\n        };\n    }\n    else {\n        return { inputType: STORAGE_INPUT_PREFIX, objectKey: input.prefix ?? '' };\n    }\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Decodes a URL-encoded string by replacing '+' characters with spaces and applying `decodeURIComponent`.\n * Reference:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent#decoding_query_parameters_from_a_url\n * @param {string} value - The URL-encoded string to decode.\n * @returns {string} The decoded string.\n */\nexport const urlDecode = (value) => {\n    return decodeURIComponent(value.replace(/\\+/g, ' '));\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, urlDecode, validateBucketOwnerID, validateStorageOperationInputWithPrefix, } from '../../utils';\nimport { listObjectsV2, } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { DEFAULT_DELIMITER, STORAGE_INPUT_PREFIX } from '../../utils/constants';\nimport { IntegrityError } from '../../../../errors/IntegrityError';\nconst MAX_PAGE_SIZE = 1000;\nexport const list = async (amplify, input) => {\n    const { options = {} } = input;\n    const { s3Config, bucket, keyPrefix: generatedPrefix, identityId, } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInputWithPrefix(input, identityId);\n    validateBucketOwnerID(options.expectedBucketOwner);\n    const isInputWithPrefix = inputType === STORAGE_INPUT_PREFIX;\n    // @ts-expect-error pageSize and nextToken should not coexist with listAll\n    if (options?.listAll && (options?.pageSize || options?.nextToken)) {\n        const anyOptions = options;\n        logger.debug(`listAll is set to true, ignoring ${anyOptions?.pageSize ? `pageSize: ${anyOptions?.pageSize}` : ''} ${anyOptions?.nextToken ? `nextToken: ${anyOptions?.nextToken}` : ''}.`);\n    }\n    const listParams = {\n        Bucket: bucket,\n        Prefix: isInputWithPrefix ? `${generatedPrefix}${objectKey}` : objectKey,\n        MaxKeys: options?.listAll ? undefined : options?.pageSize,\n        ContinuationToken: options?.listAll ? undefined : options?.nextToken,\n        Delimiter: getDelimiter(options),\n        ExpectedBucketOwner: options?.expectedBucketOwner,\n        EncodingType: 'url',\n    };\n    logger.debug(`listing items from \"${listParams.Prefix}\"`);\n    const listInputArgs = {\n        s3Config,\n        listParams,\n    };\n    if (options.listAll) {\n        if (isInputWithPrefix) {\n            return _listAllWithPrefix({\n                ...listInputArgs,\n                generatedPrefix,\n            });\n        }\n        else {\n            return _listAllWithPath(listInputArgs);\n        }\n    }\n    else {\n        if (isInputWithPrefix) {\n            return _listWithPrefix({ ...listInputArgs, generatedPrefix });\n        }\n        else {\n            return _listWithPath(listInputArgs);\n        }\n    }\n};\n/** @deprecated Use {@link _listAllWithPath} instead. */\nconst _listAllWithPrefix = async ({ s3Config, listParams, generatedPrefix, }) => {\n    const listResult = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, nextToken: pageNextToken } = await _listWithPrefix({\n            generatedPrefix,\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n    };\n};\n/** @deprecated Use {@link _listWithPath} instead. */\nconst _listWithPrefix = async ({ s3Config, listParams, generatedPrefix, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    const listOutput = decodeEncodedElements(response);\n    validateEchoedElements(listParamsClone, listOutput);\n    if (!listOutput?.Contents) {\n        return {\n            items: [],\n        };\n    }\n    return {\n        items: listOutput.Contents.map(item => ({\n            key: generatedPrefix\n                ? item.Key.substring(generatedPrefix.length)\n                : item.Key,\n            eTag: item.ETag,\n            lastModified: item.LastModified,\n            size: item.Size,\n        })),\n        nextToken: listOutput.NextContinuationToken,\n    };\n};\nconst _listAllWithPath = async ({ s3Config, listParams, }) => {\n    const listResult = [];\n    const excludedSubpaths = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, excludedSubpaths: pageExcludedSubpaths, nextToken: pageNextToken, } = await _listWithPath({\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        excludedSubpaths.push(...(pageExcludedSubpaths ?? []));\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n        excludedSubpaths,\n    };\n};\nconst _listWithPath = async ({ s3Config, listParams, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    const listOutput = decodeEncodedElements(response);\n    validateEchoedElements(listParamsClone, listOutput);\n    const { Contents: contents, NextContinuationToken: nextContinuationToken, CommonPrefixes: commonPrefixes, } = listOutput;\n    const excludedSubpaths = commonPrefixes && mapCommonPrefixesToExcludedSubpaths(commonPrefixes);\n    if (!contents) {\n        return {\n            items: [],\n            nextToken: nextContinuationToken,\n            excludedSubpaths,\n        };\n    }\n    return {\n        items: contents.map(item => ({\n            path: item.Key,\n            eTag: item.ETag,\n            lastModified: item.LastModified,\n            size: item.Size,\n        })),\n        nextToken: nextContinuationToken,\n        excludedSubpaths,\n    };\n};\nconst mapCommonPrefixesToExcludedSubpaths = (commonPrefixes) => {\n    return commonPrefixes.reduce((mappedSubpaths, { Prefix }) => {\n        if (Prefix) {\n            mappedSubpaths.push(Prefix);\n        }\n        return mappedSubpaths;\n    }, []);\n};\nconst getDelimiter = (options) => {\n    if (options?.subpathStrategy?.strategy === 'exclude') {\n        return options?.subpathStrategy?.delimiter ?? DEFAULT_DELIMITER;\n    }\n};\nconst validateEchoedElements = (listInput, listOutput) => {\n    const validEchoedParameters = listInput.Bucket === listOutput.Name &&\n        listInput.Delimiter === listOutput.Delimiter &&\n        listInput.MaxKeys === listOutput.MaxKeys &&\n        listInput.Prefix === listOutput.Prefix &&\n        listInput.ContinuationToken === listOutput.ContinuationToken;\n    if (!validEchoedParameters) {\n        throw new IntegrityError({ metadata: listOutput.$metadata });\n    }\n};\n/**\n * Decodes URL-encoded elements in the S3 `ListObjectsV2Output` response when `EncodingType` is `'url'`.\n * Applies to values for 'Delimiter', 'Prefix', 'StartAfter' and 'Key' in the response.\n */\nconst decodeEncodedElements = (listOutput) => {\n    if (listOutput.EncodingType !== 'url') {\n        return listOutput;\n    }\n    const decodedListOutput = { ...listOutput };\n    // Decode top-level properties\n    ['Delimiter', 'Prefix', 'StartAfter'].forEach(prop => {\n        const value = listOutput[prop];\n        if (typeof value === 'string') {\n            decodedListOutput[prop] = urlDecode(value);\n        }\n    });\n    // Decode 'Key' in each item of 'Contents', if it exists\n    if (listOutput.Contents) {\n        decodedListOutput.Contents = listOutput.Contents.map(content => ({\n            ...content,\n            Key: content.Key ? urlDecode(content.Key) : content.Key,\n        }));\n    }\n    // Decode 'Prefix' in each item of 'CommonPrefixes', if it exists\n    if (listOutput.CommonPrefixes) {\n        decodedListOutput.CommonPrefixes = listOutput.CommonPrefixes.map(content => ({\n            ...content,\n            Prefix: content.Prefix ? urlDecode(content.Prefix) : content.Prefix,\n        }));\n    }\n    return decodedListOutput;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { list as listInternal } from './internal/list';\nexport function list(input) {\n    return listInternal(Amplify, input ?? {});\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { headObject } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { STORAGE_INPUT_KEY } from '../../utils/constants';\nexport const getProperties = async (amplify, input, action) => {\n    const { s3Config, bucket, keyPrefix, identityId } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInput(input, identityId);\n    validateBucketOwnerID(input.options?.expectedBucketOwner);\n    const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    logger.debug(`get properties of ${objectKey} from ${finalKey}`);\n    const response = await headObject({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(action ?? StorageAction.GetProperties),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ExpectedBucketOwner: input.options?.expectedBucketOwner,\n    });\n    const result = {\n        contentType: response.ContentType,\n        size: response.ContentLength,\n        eTag: response.ETag,\n        lastModified: response.LastModified,\n        metadata: response.Metadata,\n        versionId: response.VersionId,\n    };\n    return inputType === STORAGE_INPUT_KEY\n        ? { key: objectKey, ...result }\n        : { path: objectKey, ...result };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { getProperties as getPropertiesInternal } from './internal/getProperties';\nexport function getProperties(input) {\n    return getPropertiesInternal(Amplify, input);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { isInputWithPath, resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError';\nimport { copyObject } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nconst isCopyInputWithPath = (input) => isInputWithPath(input.source);\nconst storageBucketAssertion = (sourceBucket, destBucket) => {\n    /**  For multi-bucket, both source and destination bucket needs to be passed in\n     *   or both can be undefined and we fallback to singleton's default value\n     */\n    assertValidationError(\n    // Both src & dest bucket option is present is acceptable\n    (sourceBucket !== undefined && destBucket !== undefined) ||\n        // or both are undefined is also acceptable\n        (!destBucket && !sourceBucket), StorageValidationErrorCode.InvalidCopyOperationStorageBucket);\n};\nexport const copy = async (amplify, input) => {\n    return isCopyInputWithPath(input)\n        ? copyWithPath(amplify, input)\n        : copyWithKey(amplify, input);\n};\nconst copyWithPath = async (amplify, input) => {\n    const { source, destination } = input;\n    storageBucketAssertion(source.bucket, destination.bucket);\n    const { bucket: sourceBucket } = await resolveS3ConfigAndInput(amplify, {\n        path: input.source.path,\n        options: {\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            ...input.source,\n        },\n    });\n    // The bucket, region, credentials of s3 client are resolved from destination.\n    // Whereas the source bucket and path are a input parameter of S3 copy operation.\n    const { s3Config, bucket: destBucket, identityId, } = await resolveS3ConfigAndInput(amplify, {\n        path: input.destination.path,\n        options: {\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            customEndpoint: input.options?.customEndpoint,\n            ...input.destination,\n        },\n    }); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n    assertValidationError(!!source.path, StorageValidationErrorCode.NoSourcePath);\n    assertValidationError(!!destination.path, StorageValidationErrorCode.NoDestinationPath);\n    const { objectKey: sourcePath } = validateStorageOperationInput(source, identityId);\n    const { objectKey: destinationPath } = validateStorageOperationInput(destination, identityId);\n    validateBucketOwnerID(source.expectedBucketOwner);\n    validateBucketOwnerID(destination.expectedBucketOwner);\n    const finalCopySource = `${sourceBucket}/${sourcePath}`;\n    const finalCopyDestination = destinationPath;\n    logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n    await serviceCopy({\n        source: finalCopySource,\n        destination: finalCopyDestination,\n        bucket: destBucket,\n        s3Config,\n        notModifiedSince: input.source.notModifiedSince,\n        eTag: input.source.eTag,\n        expectedSourceBucketOwner: input.source?.expectedBucketOwner,\n        expectedBucketOwner: input.destination?.expectedBucketOwner,\n    });\n    return { path: finalCopyDestination };\n};\n/** @deprecated Use {@link copyWithPath} instead. */\nexport const copyWithKey = async (amplify, input) => {\n    const { source, destination } = input;\n    storageBucketAssertion(source.bucket, destination.bucket);\n    assertValidationError(!!source.key, StorageValidationErrorCode.NoSourceKey);\n    assertValidationError(!!destination.key, StorageValidationErrorCode.NoDestinationKey);\n    validateBucketOwnerID(source.expectedBucketOwner);\n    validateBucketOwnerID(destination.expectedBucketOwner);\n    const { bucket: sourceBucket, keyPrefix: sourceKeyPrefix } = await resolveS3ConfigAndInput(amplify, {\n        ...input,\n        options: {\n            // @ts-expect-error: 'options' does not exist on type 'CopyInput'. In case of JS users set the location\n            // credentials provider option, resolveS3ConfigAndInput will throw validation error.\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            ...input.source,\n        },\n    });\n    // The bucket, region, credentials of s3 client are resolved from destination.\n    // Whereas the source bucket and path are a input parameter of S3 copy operation.\n    const { s3Config, bucket: destBucket, keyPrefix: destinationKeyPrefix, } = await resolveS3ConfigAndInput(amplify, {\n        ...input,\n        options: {\n            // @ts-expect-error: 'options' does not exist on type 'CopyInput'. In case of JS users set the location\n            // credentials provider option, resolveS3ConfigAndInput will throw validation error.\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            ...input.destination,\n        },\n    }); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n    // TODO(ashwinkumar6) V6-logger: warn `You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n    const finalCopySource = `${sourceBucket}/${sourceKeyPrefix}${source.key}`;\n    const finalCopyDestination = `${destinationKeyPrefix}${destination.key}`;\n    logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n    await serviceCopy({\n        source: finalCopySource,\n        destination: finalCopyDestination,\n        bucket: destBucket,\n        s3Config,\n        notModifiedSince: input.source.notModifiedSince,\n        eTag: input.source.eTag,\n        expectedSourceBucketOwner: input.source?.expectedBucketOwner,\n        expectedBucketOwner: input.destination?.expectedBucketOwner,\n    });\n    return {\n        key: destination.key,\n    };\n};\nconst serviceCopy = async ({ source, destination, bucket, s3Config, notModifiedSince, eTag, expectedSourceBucketOwner, expectedBucketOwner, }) => {\n    await copyObject({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.Copy),\n    }, {\n        Bucket: bucket,\n        CopySource: source,\n        Key: destination,\n        MetadataDirective: 'COPY', // Copies over metadata like contentType as well\n        CopySourceIfMatch: eTag,\n        CopySourceIfUnmodifiedSince: notModifiedSince,\n        ExpectedSourceBucketOwner: expectedSourceBucketOwner,\n        ExpectedBucketOwner: expectedBucketOwner,\n    });\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { copy as copyInternal } from './internal/copy';\nexport function copy(input) {\n    return copyInternal(Amplify, input);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation';\nimport { getPresignedGetObjectUrl } from '../../utils/client/s3data';\nimport { resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError';\nimport { DEFAULT_PRESIGN_EXPIRATION, MAX_URL_EXPIRATION, STORAGE_INPUT_KEY, } from '../../utils/constants';\nimport { constructContentDisposition } from '../../utils/constructContentDisposition';\nimport { getProperties } from './getProperties';\nexport const getUrl = async (amplify, input) => {\n    const { options: getUrlOptions } = input;\n    const { s3Config, keyPrefix, bucket, identityId } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInput(input, identityId);\n    validateBucketOwnerID(getUrlOptions?.expectedBucketOwner);\n    const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    if (getUrlOptions?.validateObjectExistence) {\n        await getProperties(amplify, input, StorageAction.GetUrl);\n    }\n    let urlExpirationInSec = getUrlOptions?.expiresIn ?? DEFAULT_PRESIGN_EXPIRATION;\n    const resolvedCredential = typeof s3Config.credentials === 'function'\n        ? await s3Config.credentials()\n        : s3Config.credentials;\n    const awsCredExpiration = resolvedCredential.expiration;\n    if (awsCredExpiration) {\n        const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n        urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n    }\n    const maxUrlExpirationInSec = MAX_URL_EXPIRATION / 1000;\n    assertValidationError(urlExpirationInSec <= maxUrlExpirationInSec, StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n    // expiresAt is the minimum of credential expiration and url expiration\n    return {\n        url: await getPresignedGetObjectUrl({\n            ...s3Config,\n            credentials: resolvedCredential,\n            expiration: urlExpirationInSec,\n        }, {\n            Bucket: bucket,\n            Key: finalKey,\n            ...(getUrlOptions?.contentDisposition && {\n                ResponseContentDisposition: constructContentDisposition(getUrlOptions.contentDisposition),\n            }),\n            ...(getUrlOptions?.contentType && {\n                ResponseContentType: getUrlOptions.contentType,\n            }),\n            ExpectedBucketOwner: getUrlOptions?.expectedBucketOwner,\n        }),\n        expiresAt: new Date(Date.now() + urlExpirationInSec * 1000),\n    };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { getUrl as getUrlInternal } from './internal/getUrl';\nexport function getUrl(input) {\n    return getUrlInternal(Amplify, input);\n}\n"],
  "mappings": "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G,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,GAAG,SAAU;AAC5D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,GAAG,UAAU;AAC5D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,GAAG,UAAU;AAC5D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,GAAG,IAAI,GAAG,GAAG,UAAU;AAC3D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,GAAG,UAAU;AAC5D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,GAAG,IAAI,GAAG,GAAG,UAAU;AAC3D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,UAAU,IAAI,IAAI,GAAG,IAAI,UAAU;AAC7D,QAAI,GAAG,G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",
  "names": ["module", "CRC32", "byteLength", "StorageValidationErrorCode", "logger", "logger", "defaultPrefixResolver", "crc32", "logger", "logger", "logger", "byteLength", "eTag", "crc32", "logger", "uploadData", "uploadDataInternal", "logger", "downloadData", "downloadDataInternal", "logger", "remove", "removeInternal", "isInputWithPrefix", "logger", "list", "listInternal", "logger", "getProperties", "getPropertiesInternal", "logger", "copy", "copyInternal", "getUrl", "getUrlInternal"]
}
